import "src/load";
import "src/text_props";
import "src/classes/*";
import "src/weapons";
import "src/HUD";
import "src/utils";
import "src/gameplay_loop";
import "src/math";
import "src/objectives";
import "src/timer";
import "src/door";
import "src/motion";
import "src/grenade";
// not using wildcard import because import order matters

function __tick__() {
    // @handles #minecraft:tick
    // @context root

    if (!$found_dependency) return fail;

    tag @e[type=#tf2:player_like] remove tf2.in_spawn;
	tf2.lifetime:@e[tag=tf2.visual]--;
    kill @e[tag=tf2.visual, scores={tf2.lifetime=..0}];

    execute as @e[type=#tf2:player_like,tag=!tf2.in_queue,tag=!tf2.is_playing,scores={tf2.queue_type=1..3}] run join_queue();
    effect give @a[tag=!tf2.allowed_to_sprint,scores={tf2.food=7..}] hunger 1000 255 true;
    effect clear @a[tag=!tf2.allowed_to_sprint,scores={tf2.food=7..}] saturation;
    effect give @a[scores={tf2.food=..1}] saturation 1 2 true;
    effect give @a[tag=tf2.uber_patient] glowing 1 0 true;
    effect give @a[tag=tf2.uber_source] glowing 1 0 true;

    $comp_queue_length   = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=1}];
    $casual_queue_length = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=2}];
    $chaos_queue_length  = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=3}];

    $enough_in_queue = true;
    if ($comp_queue_length < 12 && $casual_queue_length < 24 && $chaos_queue_length < 40) $enough_in_queue = false;
    if ($enough_in_queue) {
        execute as @e[type=marker,tag=tf2.batch,tag=!tf2.in_use,sort=random,limit=1] run start_game.as_marker.main();
    }

    execute as @e[type=marker] run marker_tick();

    execute as @e[type=item_display,tag=tf2.control_point,tag=!tf2.init] 
            at @s run Objectives.control_point.visuals.init();
    execute as @e[type=item_display,tag=tf2.control_point,tag=!tf2.locked] 
            at @s run Objectives.control_point.check_for_players();

    execute as @e[type=#tf2:player_like,tag=tf2.is_playing] at @s run Player.tick();
    tag @e[type=#tf2:player_like] remove tf2.on_point;
    execute as @e[type=item,tag=tf2.pickup] at @s run Pickup.tick();
    execute as @e[type=item_display,tag=tf2.projectile] at @s run Projectile.tick();
    execute as @e[type=item_display,tag=tf2.door] at @s run Door.tick();

    $flicker = $trigger_reminder = xrroou1m8_p_join:$__global__;
    $flicker %= 20; $trigger_reminder %= 2400;
    if ($trigger_reminder == 0) {
        Text.tellraw(@a, "&<gray>Remember, you can type &<white,bold>/trigger controls &<gray>in chat to see the controls.");
    }

    if ($flicker == 0) {
        execute as @e[type=!#tf2:player_like] 
                run Session.check_validity();
    }

    while (data storage tf2:lookup damages[]) {
        Damage.iterate();
    }
}

class Damage {
    function iterate() {
        $cause  = lookup::damages[-1].cause;
        $target = lookup::damages[-1].target;
        $amount = lookup::damages[-1].amount;
        $instakill = lookup::damage[-1].instakill;

        execute as @a[tag=tf2.is_playing]
                if score @s tf2.player.id
                = $target tf2.var
                run this.apply();

        tag @a remove tf2.cause;

        lookup::damages[-1].del();
    }
    @lazy
    function display() {
        lookup::damages[-1].X = @s::Pos[0];
        lookup::damages[-1].Z = @s::Pos[2];
        $Y = @s::Pos[1] * 10;
        $Y += 11;
        lookup::damages[-1].Y = 0.1 * (float) $Y;

        execute as @a[tag=tf2.cause, limit=1]
                run HUD.damage_numbers()
                with lookup::damages[-1];
    }
    @lazy()
    function hit_sfx() {
        execute unless entity @s[tag=tf2.cause]
                as @a[tag=tf2.cause,predicate=!tf2:holding_melee] at @s
                run playsound tf2:ding.hit player @s ~ ~ ~ 0.8 1.2 0.05;
    }
    function apply() {
        if (tf2.health:@s <= 0) {
            return fail;
        }
        if (entity @s[tag=tf2.uber_source]) {
            return fail;
        }
        if (entity @s[tag=tf2.uber_patient]) {
            return fail;
        }

        execute as @a[tag=tf2.is_playing]
                if score @s tf2.player.id
                = $cause tf2.var
                run tag @s add tf2.cause;

        if ($instakill) {
            $amount = tf2.health:@s;
        }
        tf2.health:@s -= $amount;
        damage @s 0.01 tf2:screenshake by @a[tag=tf2.cause, limit=1];
        if (!entity @a[tag=tf2.cause]) {
            // For afterburn & fall damage
            damage @s 0.01 tf2:screenshake;
        }
        tf2.ticks_since_hurt:@s = 0;
        if (tf2.health:@s < tf2.max_health:@s) {
            tag @s remove tf2.overheal;
        }
        this.display();

        if (tf2.health:@s > 0) {
            return run this.hit_sfx();
        }
        if (entity @s[tag=tf2.said_death_msg]) {
            return run this.hit_sfx();
        }
        
        tf2.batch_number:$local = tf2.batch_number:@s;
		execute as @a if score @s tf2.batch_number 
		                 = $local tf2.batch_number 
		               run tag @s add tf2.current;

        this.death_message();
        execute unless entity @s[tag=tf2.cause]
                as @a[tag=tf2.cause,predicate=!tf2:holding_melee] at @s
                run playsound tf2:ding.kill player @s ~ ~ ~ 1.1 1 0.05;

		tag @a remove tf2.current;
		
        Player.death();
    }
    function death_message() {
        if (data storage tf2:lookup damages[-1].weapon) {
            return run Text.tellraw(@a[tag=tf2.current], "&<@p[tag=tf2.cause]> &<kill_verb> &<@s> with &<weapon_name>");
        }
        if (entity @a[tag=tf2.cause]) {
		    return run Text.tellraw(@a[tag=tf2.current], "&<@p[tag=tf2.cause]> &<kill_verb> &<@s>");
        }
        Text.tellraw(@a[tag=tf2.current], "&<@s> &<kill_verb>");
    }
    function try_merge_into_last() {
        if (!data storage tf2:lookup damages[]) {
            return false;
        }

        $temp = lookup::damages[-1].cause;
        if ($temp != $cause) {
            return false;
        }

        $temp = lookup::damages[-1].target;
        if ($temp != $target) {
            return false;
        }

        $temp = lookup::damages[-1].amount;
        $temp += $_finalDamage_;
        lookup::damages[-1].amount = $temp;
        return true;
    }
}



function marker_tick() {
    if (entity @s[tag=tf2.in_use,scores={tf2.gamemode=Gamemode.ATK_DEF .. Gamemode.DOMINATION}] && entity @a) {
        Objectives.control_point.gamestate();
    }
    if (entity @s[tag=tf2.in_use]) Timer.main();

    // honetly
    execute if entity @s[tag=tf2.batch] run {
        index::i = tf2.batch_number:@s;
        execute run {$execute unless score @s tf2.session = $global_$(i) tf2.session run kill @s;} with index::;
    }

    JMC.put("execute at @s[tag=tf2.spawn_door] run function tf2:spawn/protect with entity @s data");
}

import "src/player";

class Pickup {
    function tick() {
        tf2.respawn_timer:@s --;
        if (tf2.respawn_timer:@s > 0) return 0;

        @s[scores={tf2.respawn_timer=0}]::Item.components."minecraft:custom_model_data".floats[0] = (float) tf2.size:@s;
        execute positioned ~ ~-500.5 ~
                run ride @s[scores={tf2.respawn_timer=0}] 
                mount @e[type=area_effect_cloud,distance=..0.01,limit=1];

        // 1 -> 20, 2 -> 50, 3 -> 100
        execute if entity @s[tag=tf2.health_pack] as @a 
                if score @s tf2.health = @s tf2.max_health
                run tag @s add tf2.ineligible;
        execute if entity @s[tag=tf2.ammo_pack] as @a 
                if score @s tf2.primary_ammo   = @s tf2.primary_maxAmmo
                if score @s tf2.primary_clip   = @s tf2.primary_maxClip
                if score @s tf2.secondary_ammo = @s tf2.secondary_maxAmmo
                if score @s tf2.secondary_clip = @s tf2.secondary_maxClip
                run tag @s add tf2.ineligible;
        tag @a[scores={tf2.class=Class.SPY, tf2.cloak=..599}] remove tf2.ineligible;
        tag @a[gamemode=spectator] add tf2.ineligible;
        tag @a[distance=..1.25,limit=1,sort=nearest,tag=!tf2.ineligible] add tf2.recipient;
        tag @a remove tf2.ineligible;
        
        tf2.size:@s ??= 2;
        $percent = tf2.size:@s;
        $percent *= $percent;
        $percent += 1;
        $percent *= 10;

        if (!entity @a[tag=tf2.recipient]) return 1;
        $add_amount = $percent;
        if (entity @s[tag=tf2.health_pack]) {
            execute as @a[tag=tf2.recipient] run this.give_health();
        }
        if (entity @s[tag=tf2.ammo_pack]) {
            execute as @a[tag=tf2.recipient] run this.give_ammo();
        }
        tf2.respawn_timer:@s = 200;
        @s::Item.components."minecraft:custom_model_data".floats[0] = -1;
        ride @s[tag=!tf2.no_respawn] dismount;
        tp @s ~ ~500 ~;
        tag @a remove tf2.recipient;
        if (entity @s[tag=!tf2.no_respawn]) return 2;
        execute on vehicle run tp @s ~ ~-500 ~;
        kill @s;
    }
    function give_health() {
        playsound tf2:pickup.health player @s ~ ~ ~ 0.55 0.85 0.2;
        $add_amount *= tf2.max_health:@s;
        $add_amount += 99;
        $add_amount /= 100;
        tf2.health:@s += $add_amount;
        Player.clamp_health();
        tag @s remove tf2.on_fire;
    }
    function give_ammo() {
        playsound tf2:pickup.ammo player @s ~ ~ ~ 0.6 0.9 0.2;
        $total_ammo = tf2.primary_maxAmmo:@s;
        $total_ammo += tf2.primary_maxClip:@s;
        $add_amount *= $total_ammo;
        $add_amount += 99;
        $add_amount /= 100;
        $clip_space = tf2.primary_maxClip:@s;
        $clip_space -= tf2.primary_clip:@s;
        $clip_space < $add_amount;
        tf2.primary_clip:@s += $clip_space;
        $add_amount -= $clip_space;

        tf2.primary_ammo:@s += $add_amount;
        tf2.primary_ammo:@s < tf2.primary_maxAmmo:@s;

        $add_amount = $percent;
        $total_ammo = tf2.secondary_maxAmmo:@s;
        $total_ammo += tf2.secondary_maxClip:@s;
        $add_amount *= $total_ammo;
        $add_amount += 99;
        $add_amount /= 100;
        $clip_space = tf2.secondary_maxClip:@s;
        $clip_space -= tf2.secondary_clip:@s;
        $clip_space < $add_amount;
        tf2.secondary_clip:@s += $clip_space;
        $add_amount -= $clip_space;
        
        tf2.secondary_ammo:@s += $add_amount;
        tf2.secondary_ammo:@s < tf2.secondary_maxAmmo:@s;

        if (tf2.class:@s != Class.SPY) {
            return 1;
        }

        $full_cloak = @s::equipment.offhand.components.minecraft:custom_data.attributes.cloak_recharge * 20;
        $add_amount = $percent;
        $add_amount *= $full_cloak;
        $add_amount += 99;
        $add_amount /= 100;
        tf2.cloak:@s += $add_amount;
        tf2.cloak:@s < $full_cloak;
    }
    function delete_stack() {
        execute on vehicle run this.delete_stack();
        kill @s;
    }
}

class Spawn {
    function init() {
        // (Re)spawns a player, and changes their gamemode back to adventure if applicable.
        // @within:
        //   __tick__()
        //   team_assign()

        index::i = tf2.batch_number:@s;
        this.get_coords() with index::;
        this.tp() with coords::;
        gamemode adventure @s;
        tag @s add tf2.dead;
        tag @s remove tf2.said_death_msg;
        tag @s remove tf2.on_fire;
        if (entity @s[tag=tf2.uber_patient]) {
            Class.Medic.uber_model(remove, patient);
        }
        tf2.afterburn_ticks:@s =
        tf2.interpolate_rmb:@s = 0;
        tf2.time_surfaced:@s = tf2.drown_lost:@s = 0;
        tf2.airblast_delay:@s = 0;
        replenish_ammo_and_health();

        // Remove "You died!" message
        tag @s remove tf2.dead;
        Text.title(@s, "");
        Text.subtitle(@s, "");
    }
    function get_coords() {
        // Coordinates storage for the teleport function
        // @within this.init()
        $ coords::red_X = running_games::$(i).spawn_point.red[0][0];
        $ coords::red_Y = running_games::$(i).spawn_point.red[0][1];
        $ coords::red_Z = running_games::$(i).spawn_point.red[0][2];
        $ coords::blu_X = running_games::$(i).spawn_point.blu[0][0];
        $ coords::blu_Y = running_games::$(i).spawn_point.blu[0][1];
        $ coords::blu_Z = running_games::$(i).spawn_point.blu[0][2];
    }
    function tp() {
        // Dynamically teleports the player to their spawn point.
        // @needs_macro
        // @within this.init()

        $tp @s[scores={tf2.team=1}] $(red_X) $(red_Y) $(red_Z);
        $tp @s[scores={tf2.team=2}] $(blu_X) $(blu_Y) $(blu_Z);
    }
    function protect() {
        // Teleports players away from enemy spawn room doors.
        // @needs_macro
        // @within __tick__()

        execute unless entity @s[tag=tf2.visible] run return run {
            $execute as @e[type=#tf2:player_like,
                           dx=$(dx),dy=$(dy),dz=$(dz)] 
                     unless score @s tf2.team matches $(opp_team) 
                     run tag @s add tf2.in_spawn;
            $tp @e[type=#tf2:player_like,
                   dx=$(dx),dy=$(dy),dz=$(dz),
                   scores={tf2.team=$(opp_team)}] $(direct_tp);
        } with @s::data;

        tf2.draw_delay:@s --;
        if (tf2.draw_delay:@s <= 0) {
            NoEntrySign.draw();
        }

        $execute as @e[type=#tf2:player_like, dx=$(dx), dy=$(dy), dz=$(dz)] 
                 positioned as @s[scores={tf2.team=$(opp_team)}]
                 run tp @s ^ ^ ^0.5;
    }
}
class NoEntrySign {
    function draw() {
        // Setup
        lookup::my_data = @s::data;
        tf2.team:$opp = lookup::my_data.opp_team;
        execute as @a if score @s tf2.team = $opp tf2.team 
                run tag @s add tf2.enemy;
        $x = lookup::my_data.dx;
        $y = lookup::my_data.dy;
        $z = lookup::my_data.dz;
        $horizontal = $x; $horizontal > $z;

        // Outline
        $i = 0;
        $line = 1;
        execute positioned ~ ~1 ~ run this.outline();

        // Diagonal part
        if ($horizontal >= 2 && $y >= 2) {
            if ($horizontal > $y) {  
                $num = $y;
                $denom = $horizontal;
            }
            else {
                $num = $horizontal;
                $denom = $y;
            }
            $num *= 1000; $num /= $denom;
            vars::fraction = 0.001 * (double) $num;
            $i = 0;
            $longest = $y; $longest > $horizontal;
            execute run {
                $if ($z == 0 && $x > $y) {
                    vars::param = "~1 ~$(fraction) ~";
                }
                $if ($z == 0 && $x <= $y) {
                    vars::param = "~$(fraction) ~1 ~";
                }
                $if ($x == 0 && $z > $y) {
                    vars::param = "~ ~$(fraction) ~1";
                }
                $if ($x == 0 && $z <= $y) {
                    vars::param = "~ ~1 ~$(fraction)";
                }
            } with vars::;
            this.diagonal() with vars::;
        }
        tf2.draw_delay:@s = 80;
        tag @a remove tf2.enemy;
    }
    function outline() {
        particle block_marker{block_state: "barrier"} ~0.5 ~0.5 ~0.5 0 0 0 0 1 force @a[tag=tf2.enemy];
        $i++;
        if ($i >= $y && $line matches 1..3 && $line != 2) {
            $line ++;
            $i = 0;
        }
        if ($i >= $horizontal && $line matches 2..4 && $line != 3) {
            $line ++;
            $i = 0;
        }
        
        if ($line == 1) execute positioned ~ ~1 ~ run this.outline();
        if ($line == 2 && $x) execute positioned ~1 ~ ~ run this.outline();
        if ($line == 2 && $z) execute positioned ~ ~ ~1 run this.outline();
        if ($line == 3) execute positioned ~ ~-1 ~ run this.outline();
        if ($line == 4 && $x) execute positioned ~-1 ~ ~ run this.outline();
        if ($line == 4 && $z) execute positioned ~ ~ ~-1 run this.outline();
    }
    function diagonal() {
        // @needs_macro
        particle block_marker{block_state: "barrier"} ~0.5 ~0.5 ~0.5 0 0 0 0 1 force @a[tag=tf2.enemy];
        $i++;
        if ($i >= $longest) return 1;
        $execute positioned $(param)
                 run this.diagonal()
                 with vars::;
    }
}

function uninstall() {
    kill @e[type=marker];
}