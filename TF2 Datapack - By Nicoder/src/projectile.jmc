class Projectile {

    // Gets the position of the executing entity and puts it into tf2.[x,y,z]
    function get_pos() {
        lookup::pos = @s::Pos;
        Hardcode.repeatLists(
            ["[AXIS]", "[INDEX]"],
            () => {
                tf2.[AXIS]:@s = lookup::pos[[INDEX]] * 1000;
            },
            [
                ["x", "y", "z"],
                ["0", "1", "2"]
            ]
        );
    }

    function spawn() {
        // testing code
        tf2.team:$temp = tf2.team:@s;
        tf2.player.id:$temp = tf2.player.id:@s;
        tf2.batch_number:$local = tf2.batch_number:@s;
        Math.facing_vector();
        summon::projectile = {X: 0.0, Y: 0.0, Z: 0.0, yaw: 0.0, pitch: 0.0, spawnX: 0.0, spawnY: 0.0, spawnZ: 0.0};

        // Convert HU/sec -> blocks/sec
        summon::projectile.speed = 0.01905 * (double) lookup::item.components.minecraft:custom_data.projectile.speed;
        summon::projectile.speed_range = lookup::item.components.minecraft:custom_data.projectile.speed_range;
        if (data storage tf2:summon projectile.speed_range) {
            summon::projectile.speed = 0.01905 * (double) Math.macro_random() 
                                       with summon::projectile.speed_range;
        }
        // Convert blocks/sec -> blocks/tick
        summon::projectile.speed = EVAL(1  / 20_000) * (double) summon::projectile.speed * 1000;

        summon::projectile.deviation = lookup::item.components.minecraft:custom_data.projectile.deviation;
        if (data storage tf2:summon projectile.deviation) {
            Projectile.deviation();
        }
        Hardcode.repeatList(
            "[AXIS]",
            () => { 
                $mot.mot_[AXIS] := ({summon::projectile.speed * 1000} * $output_vector_[AXIS]) / 1000;
            },
            ["x", "y", "z"]
        );

        summon::projectile.weapon = lookup::item;

        $relative_to_player = lookup::item.components.minecraft:custom_data.projectile.relative_to_player;
        if ($relative_to_player) { Projectile.compensate_velocity(); }

        summon::projectile.spawnX = lookup::item.components.minecraft:custom_data.projectile.spawn[0];
        summon::projectile.spawnY = lookup::item.components.minecraft:custom_data.projectile.spawn[1];
        summon::projectile.spawnZ = lookup::item.components.minecraft:custom_data.projectile.spawn[2];
        summon::projectile.weapon_name = lookup::item.components.minecraft:custom_name;
        summon::projectile.model = lookup::item.components.minecraft:custom_data.projectile.model;
        if (tf2.team:@s == 1) { summon::projectile.team = "red"; }
        if (tf2.team:@s == 2) { summon::projectile.team = "blu"; }
        Hardcode.repeatList("|property|", () => {
            $|property| = lookup::item.components.minecraft:custom_data.projectile.|property|;
        }, Projectile.SPECIAL_PROPERTIES);

        execute at @s anchored eyes 
                run this.spawn_internal()
                with summon::projectile;

        execute as @n[type=item_display,tag=tf2.new,tag=tf2.projectile] run {
            tf2.age:@s = 0;
            tf2.team:@s = tf2.team:$temp;
            tf2.player.id:@s = tf2.player.id:$temp;
            tf2.batch_number:@s = tf2.batch_number:$local;

            // tf2.model_number:@s = summon::projectile.CMD;
            @s::billboard = lookup::item.components.minecraft:custom_data.projectile.billboard;
            @s::item.components.minecraft:custom_data.attributes = lookup::item.components.minecraft:custom_data.attributes;
            @s::item.components.minecraft:custom_data.projectile = lookup::item.components.minecraft:custom_data.projectile;
            
            tf2.lifetime:@s = Projectile.calc_lifetime();

            @s::item.components.minecraft:custom_name = summon::projectile.weapon_name; 

            Hardcode.repeatList("|property|", () => {
                if ($|property|) {
                    tag @s add tf2.|property|;
                }
            }, Projectile.SPECIAL_PROPERTIES);

            this.get_pos();
            tf2.hitbox:@s = lookup::item.components.minecraft:custom_data.projectile.hitbox * EVAL(1000 * 0.01905);
            Hardcode.repeatList("[AXIS]", () => {
                tf2.mot_[AXIS]:@s = $mot.mot_[AXIS];
            }, ["x", "y", "z"]);

            if (data storage tf2:lookup item.components.minecraft:custom_data.projectile.rotation{mode: Rotation.FIXED}) expand {
                this.linear_velocity_to_quaternion();
            }

            if (data storage tf2:lookup item.components.minecraft:custom_data.projectile.rotation{mode: Rotation.PHYSICAL}) {
                $angular_speed = lookup::item.components.minecraft:custom_data.projectile.rotation.initial * EVAL(1000 * 0.01905 / 20);
                this.initial_rotation();
            }

            tag @s remove tf2.new;
        }
    }
    function spawn_internal() {
        $ summon item_display ^$(spawnX) ^$(spawnY) ^$(spawnZ) {
            Rotation: [$(yaw)f, $(pitch)f],
            Tags: ["tf2.projectile", "tf2.new"],
            item: {id: "minecraft:white_dye", components:{
                "minecraft:item_model": "tf2:projectile/$(model)",
                "minecraft:custom_model_data": {strings: [$(team)]},
                "minecraft:custom_data": {}
            }},
            start_interpolation: -1,
            item_display: "ground",
            transformation: {
                right_rotation: [0.0f, 0.0f, 0.0f, 1.0f],
                scale: [1.0f, 1.0f, 1.0f],
                left_rotation: [0.0f, 0.0f, 0.0f, 1.0f],
                translation: [0.0f, 0.0f, 0.0f]
            },
            interpolation_duration: 1,
            teleport_duration: 1
        };
    }

    function tick() {
        // printf("velocity = [&<tf2.mot_x:@s>, &<tf2.mot_y:@s>, &<tf2.mot_z:@s>]");
        if (entity @s[tag=tf2.has_trail]) {
            execute at @s run Projectile.trail();
        }
        if (entity @s[tag=tf2.animated]) {
            Projectile.animate();
        }


        if (entity @s[tag=!tf2.stuck]) {
            Motion.move(); 
        }
        if (entity @s[tag=tf2.delayed_elasticity]) {
            $elasticity = @s::item.components.minecraft:custom_data.projectile.entity_collision.elasticity * 1000;
            tf2.mot_x:@s := (tf2.mot_x:@s * $elasticity) / 1000;
            tf2.mot_z:@s := (tf2.mot_z:@s * $elasticity) / 1000;
            tag @s remove tf2.delayed_elasticity;
        }

        if (tf2.collision_entity:@s == 0) {
            tag @s add tf2.has_escaped_player;
        }
        if (entity @s[tag=!tf2.stuck] && 
            data entity @s item.components.minecraft:custom_data.projectile.forces) {
            this.apply_forces();
        }
        if (tf2.collision_entity:@s[tag=tf2.has_escaped_player] == 1) {
            this.handle_entity_collision();
        }
        if (tf2.collision:@s[scores={tf2.collision_entity=0}]) {
            this.handle_block_collision();
        }
        if (entity @s[tag=!tf2.stuck]) {
            this.handle_rotation();
        }

        tf2.age:@s++;
        if (tf2.age:@s > tf2.lifetime:@s) {
            this.end_of_life();
        }
       
        kill @s[tag=tf2.delete];

        execute as @e[type=#tf2:player_like,tag=tf2.batch] run Projectile.remove_tags();
    }
    function trail() {
        Hardcode.repeat("|z|", () => {
            particle minecraft:smoke ^ ^-0.2 ^Hardcode.calc(|z| / -3) 0 0 0 0 10;
        }, start=1, stop=4);
    }
    function animate() {
        tf2.model_number:@s++;
        item modify entity @s contents { 
            "function": "minecraft:set_custom_model_data",
            "floats": {
                "values": [ {"type": "minecraft:score", "target": "this", "score": "tf2.model_number"} ],
                "mode": "replace_section",
                "offset": 0, "size": 1
            }
        };
    }
    function calc_lifetime() {
        if (data storage tf2:summon projectile.weapon.components.minecraft:custom_data.projectile.lifetime) {
            return run summon::projectile.weapon.components.minecraft:custom_data.projectile.lifetime * 20;
        }
        
        if (data storage tf2:summon projectile.weapon.components.minecraft:custom_data.projectile.lifetime_range) expand {
            vars::min = (int) summon::projectile.weapon.components.minecraft:custom_data.projectile.lifetime_range.min * 20;
            vars::max = (int) summon::projectile.weapon.components.minecraft:custom_data.projectile.lifetime_range.max * 20;
            return run Math.macro_random() 
                       with vars::;
        }

        return Projectile.DEFAULT_LIFETIME;
    }
    function deviation() {
        $input_pitch = @s::Rotation[1] * 10;
        $input_yaw = @s::Rotation[0] * 10;
        Math.gimbal_to_matrix();

        $horizontal_count = $vertical_count = 10;
        $spread_least = summon::projectile.deviation.min;
        $spread_most = summon::projectile.deviation.max;

        Math.Sway_Heave_Surge.find();
        Math.Sway_Heave_Surge.apply();
    }
    function compensate_velocity() {
        $mot.mot_x := $mot.mot_x + tf2.now_x:@s - tf2.last_x:@s;
        $mot.mot_z := $mot.mot_z + tf2.now_z:@s - tf2.last_z:@s;
    }
    function apply_forces() {
        forces::{} += @s::item.components.minecraft:custom_data.projectile.forces;

        $gravity = forces::gravity * 1000;
        tf2.mot_y:@s -= $gravity;


        $friction = 1000;
        if (data storage tf2:forces drag) {
            $friction = forces::drag * 1000;
        }
        if (tf2.collision:@s && data storage tf2:forces collision_friction) {
            $mu = forces::collision_friction * 1000;
            $friction *= $mu;
            $friction /= 1000;
        }
    
        Hardcode.repeatList(
            "[AXIS]",
            () => {
                tf2.mot_[AXIS]:@s *= $friction;
                tf2.mot_[AXIS]:@s /= 1000;
            },
            ["x", "y", "z"]
        );

        if (tf2.collision_y:@s == -1 && tf2.collision_entity:@s != 1) {
            tf2.mot_y:@s = 0;
        }
    }

    function handle_block_collision() {
        $mode = @s::item.components.minecraft:custom_data.projectile.block_collision.mode;
        
        switch ($mode) {
            case Collision.CONTINUE:
            break;

            case Collision.IMPACT:
            this.impact();

            case Collision.BOUNCE:
            $impact_if_first = @s::item.components.minecraft:custom_data.projectile.block_collision.impact_if_first;
            if ($impact_if_first && entity @s[tag=!tf2.has_hit_wall, tag=!tf2.has_hit_entity]) {
                this.impact();
            } 
            else {
                this.block_bounce();
            }

            case Collision.STICK:
            tf2.halt:@s = true;
            tag @s add tf2.stuck;
        }
    }
    function block_bounce() {
        $elasticity = @s::item.components.minecraft:custom_data.projectile.block_collision.elasticity * 1000;
        // Reduce speed when it hits a wall
        if (tf2.collision_x:@s != 0 || tf2.collision_z:@s != 0) {
            Hardcode.repeatList(
                "[AXIS]",
                () => {
                    tf2.mot_[AXIS]:@s *= $elasticity;
                    tf2.mot_[AXIS]:@s /= 1000;
                },
                ["x", "y", "z"]
            );
        }

        if (tf2.collision_y:@s[tag=!tf2.has_hit_ground] != 0) {
            this.reorient_as_cylinder();
        }

        // Flag for wall hits
        tag @s[scores={tf2.collision=1}] add tf2.has_hit_wall;

        // Apply bounces
        Hardcode.repeatList(
            "[AXIS]",
            () => { if (tf2.collision_[AXIS]:@s != 0) tf2.mot_[AXIS]:@s *= -1; },
            ["x", "y", "z"]
        );

        tag @s add tf2.has_hit_wall;
    }
    function reorient_as_cylinder() { 
        vars::save_rotation = @s::transformation.right_rotation;
        tf2.mot_z:@s *= -1;
        tf2.mot_x:@s >< tf2.mot_z:@s;    
        this.linear_velocity_to_quaternion();
        Hardcode.repeatLists(
            ["[AXIS]", "[INDEX]"],
            () => {  
                $input_quaternion_1_[AXIS] = vars::save_rotation[[INDEX]] * 1000;
                $input_quaternion_2_[AXIS] = tf2.quaternion_[AXIS]:@s;
                // printf("input_quaternion_1_[AXIS] = &<yellow,$input_quaternion_1_[AXIS]>");
                // printf("input_quaternion_2_[AXIS] = &<yellow,$input_quaternion_2_[AXIS]>");
            },
            [
                ["r", "i", "j", "k"],
                ["3", "0", "1", "2"]
            ]
        );
        Math.quaternion_dot_product();
        // printf("dot_product = &<green,$dot_product>");
        $dot_product *= $dot_product;
        if ($dot_product < 500000) {
            // printf("&<green,bold>flipping!");
            tf2.mot_x:@s *= -1;
            tf2.mot_z:@s *= -1;
            this.linear_velocity_to_quaternion();
            tf2.mot_x:@s *= -1;
            tf2.mot_z:@s *= -1;
        }
        // tellraw @a {color:"aqua", nbt:"transformation.right_rotation", entity:'@s'};
        tf2.mot_x:@s >< tf2.mot_z:@s;
        tf2.mot_z:@s *= -1;

        // Hardcode.repeatList(
        //     "[AXIS]",
        //     () => { tf2.ang_vel_[AXIS]:@s = 0; },
        //     ["x", "y", "z"]
        // );

        tag @s add tf2.has_hit_ground;
    }

    function handle_entity_collision() {
        $mode = @s::item.components.minecraft:custom_data.projectile.entity_collision.mode;
        
        switch ($mode) {
            case Collision.CONTINUE:
            this.impact();
            tag @s remove tf2.delete;

            case Collision.IMPACT:
            this.impact();

            case Collision.BOUNCE:
            $impact_if_first = @s::item.components.minecraft:custom_data.projectile.entity_collision.impact_if_first;
            if ($impact_if_first && entity @s[tag=!tf2.has_hit_wall, tag=!tf2.has_hit_entity]) {
                this.impact();
            } 
            else {
                // printf("entity bounce");
                this.entity_bounce();
            }
        }
    }
    function entity_bounce() {
        // printf("&<red> pre-collision velocity = [&<tf2.mot_x:@s>, &<tf2.mot_y:@s>, &<tf2.mot_z:@s>]");
        $elasticity = @s::item.components.minecraft:custom_data.projectile.entity_collision.elasticity * 1000;
        if (tf2.collision_x:@s != 0 || tf2.collision_z:@s != 0) {
            // printf("XZ");
            Hardcode.repeatList(
                "[AXIS]",
                () => {
                    tf2.mot_[AXIS]:@s *= $elasticity;
                    tf2.mot_[AXIS]:@s /= 1000;
                },
                ["x", "z"]
            );
        }

        if (tf2.collision_entity_y:@s != 0) {
            $x = random value 1..360;
            // printf("  x = &<$x>");
            $z := -($x ** 2) + EVAL(360 ** 2);
            $z = Math.sqrt($z);
            // printf("  z = &<$z>");


            $temp := $tf2.mot_x:@s * $tf2.mot_x:@s / $tf2.mot_z:@s / $tf2.mot_z:@s;

            if (tf2.mot_x:@s < 0) {tf2.mot_x:@s -= $x;}
            if (tf2.mot_x:@s >= 0) {tf2.mot_x:@s += $x;}

            if (tf2.mot_z:@s < 0) {tf2.mot_z:@s -= $z;}
            if (tf2.mot_z:@s >= 0) {tf2.mot_z:@s += $z;}

            if (predicate tf2:coin_flip) { tf2.mot_x:@s *= -1; }
            else { tf2.mot_z:@s *= -1; }

            tf2.mot_y:@s *= $elasticity;
            tf2.mot_y:@s /= 1000; 

            tag @s add tf2.delayed_elasticity;
        }

        // Apply bounces
        Hardcode.repeatList(
            "[AXIS]",
            () => { if (tf2.collision_entity_[AXIS]:@s != 0) tf2.mot_[AXIS]:@s *= -1; },
            ["x", "y", "z"]
        );

        // printf("&<aqua> post-collision velocity = [&<tf2.mot_x:@s>, &<tf2.mot_y:@s>, &<tf2.mot_z:@s>]");
        tag @e remove tf2.hit_by_projectile;
        tag @s add tf2.has_hit_entity;
    }

    function impact() {
        lookup::item = @s::item;
        $_damage_ = lookup::item.components.minecraft:custom_data.attributes.damage.base;
        if (data storage tf2:lookup item.components.minecraft:custom_data.attributes.damage.indirect 
            && !entity @s[tag=!tf2.has_hit_wall, tag=!tf2.has_hit_entity]) {
            $_damage_ = lookup::item.components.minecraft:custom_data.attributes.damage.indirect;
            // print($_damage_);
        }
        $_selfDamage_ = lookup::item.components.minecraft:custom_data.projectile.explosion.selfDamage;
        $_maxRamp_ = lookup::item.components.minecraft:custom_data.attributes.damage.maxRamp * 100;
        if (!data storage tf2:lookup item.components.minecraft:custom_data.attributes.damage.maxRamp) $_maxRamp_ = 150;
        $_temporalFalloff_ = lookup::item.components.minecraft:custom_data.attributes.damage.temporalFalloff;
        $_rangeDependent_ ?= execute unless predicate tf2:uniform_damage;

        vars::weapon_name = lookup::item.components.minecraft:custom_name;

        // Narrow search space to the current game
        tf2.batch_number:$local = tf2.batch_number:@s;
        tag @e remove tf2.search;
        execute as @e[type=#tf2:player_like]
                if score @s tf2.batch_number
                   = $local tf2.batch_number
                unless entity @s[gamemode=spectator]
                run tag @s add tf2.batch;
        tag @e[tag=tf2.batch] add tf2.search;
        // Determine which players are opponents
        tf2.team:$temp = tf2.team:@s;
        execute as @e[type=#tf2:player_like,tag=tf2.search]
                unless score @s tf2.team = $temp tf2.team
                run tag @s add tf2.opponent;

        tag @s add tf2.delete;
        if (entity @s[tag=!tf2.explosion]) return run {
            Projectile.simple_damage();
        }

        vars::radius = 0.01905 * (double) lookup::item.components.minecraft:custom_data.projectile.explosion.radius;
        Projectile.explode() with vars::;
    }
    function simple_damage() {
        if (!entity @a[tag=tf2.hit_by_projectile,tag=tf2.opponent,scores={tf2.health=1..}]) {return fail;}

        tf2.player.id:$temp = tf2.player.id:@s;
        execute as @a if score @s tf2.player.id = $temp tf2.player.id run tag @s add tf2.origin;
        
        if (!$_temporalFalloff_) expand {
            this.pythagorean_3D();
            Weapons.calculate_falloff();
        }
        if ($_temporalFalloff_) {
            this.temporal_falloff();
        }
        $_finalDamage_ := ($_damage_ * $_multiplier_ + 99) / 100;

        lookup::damages << {};
        lookup::damages[-1].cause = tf2.player.id:@s;
        lookup::damages[-1].target = tf2.player.id:@p[tag=tf2.hit_by_projectile];
        lookup::damages[-1].amount = $_finalDamage_;
        lookup::damages[-1].kill_verb = "killed";
        lookup::damages[-1].weapon = vars::weapon_name;

        vars::callbacks = @s::item.components.minecraft:custom_data.attributes.on_hit;
        vars::callback = vars::callbacks[0];
        if (data storage tf2:vars callbacks[]) {
            this.callbacks() with vars::;
        }

    }
    function callbacks() {
        // @needs_macro
        vars::callback = vars::callbacks[0];
        $ $(callback);
        vars::callbacks[0].del();
        if (data storage tf2:vars callbacks[]) {
            this.callbacks() with vars::;
        }
    }
    function pythagorean_3D() {
        execute as @e[tag=tf2.origin] at @s summon marker run {
            $X0 = @s::Pos[0] * 100;
            $Y0 = @s::Pos[1] * 100;
            $Z0 = @s::Pos[2] * 100;
            kill;
        }
        execute at @s summon marker run {
            $Xf = @s::Pos[0] * 100;
            $Yf = @s::Pos[1] * 100;
            $Zf = @s::Pos[2] * 100;
            kill;
        }
        $deltaX := $Xf - $X0; 
        $deltaY := $Yf - $Y0; 
        $deltaZ := $Zf - $Z0; 
        summon::matrix = [
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 1f
        ];
        summon::matrix[0] = (float) $deltaX;
        summon::matrix[4] = (float) $deltaY;
        summon::matrix[8] = (float) $deltaZ;
        execute summon item_display run {
            @s::transformation = tf2:summon::matrix;
            vars::distance = 0.01 * (double) @s::transformation.scale[0];
            kill;
        }
    }
    function temporal_falloff() {
        $_multiplier_ := 100 + (-tf2.age:@s * 100 / tf2.lifetime:@s); 
        $_multiplier_ > 50;
        $_multiplier_ < 100;
    }
    function explode() {
        particle minecraft:explosion ~ ~ ~;
        $playersHurt = $_totalDamage_ = 0;
        tf2.player.id:$temp = tf2.player.id:@s;
        execute as @a if score @s tf2.player.id = $temp tf2.player.id expand {
            tag @s add tf2.origin;
            tag @s add tf2.opponent;
        }
        tag @s add tf2.damage_source;
        $ execute at @s as @e[type=#tf2:player_like,tag=tf2.opponent,distance=..$(radius)] run this.wall_check();
        tag @s remove tf2.damage_source;
        tag @a remove tf2.origin;
    }
    function wall_check() {
        tag @s add tf2.player;
        execute at @n[tag=tf2.damage_source] summon marker run {
            @s::NoAI = 1b;
            rotate @s facing entity @e[tag=tf2.player,limit=1] feet;
            $input_pitch = @s::Rotation[1] * 10;
            $input_yaw = @s::Rotation[0] * 10;
            Math.gimbal_to_vector();
            raycast::direction.X = 0.001 * (float) $output_vector_x;
            raycast::direction.Y = 0.001 * (float) $output_vector_y;
            raycast::direction.Z = 0.001 * (float) $output_vector_z;
            Raycast.informational();
            kill @s;
        }
        tag @s add tf2.player;

        vars::distance = iris:output::Distance;
        tag @s remove tf2.player;
        if (entity @s[tag=tf2.hit_by_projectile]) expand {
            vars::distance = 0;
            this.splash_damage();
        }
        $id = iris:output::TargetedEntity;
        if (!entity @s[tag=tf2.hit_by_projectile] && $id == iris.id:@s) {
            this.splash_damage();
        } 
    }
    function splash_damage() {
        $_finalDamage_ = this.calculate_splash();

        if ($_finalDamage_ > 0) {
            $playersHurt++;
        }

        lookup::damages << {};
        lookup::damages[-1].cause = tf2.player.id:@a[tag=tf2.origin,limit=1];
        lookup::damages[-1].target = tf2.player.id:@s;
        lookup::damages[-1].amount = $_finalDamage_;
        lookup::damages[-1].kill_verb = "blew up";
        lookup::damages[-1].weapon = vars::weapon_name;

        this.knockback();
    }
    function calculate_splash() {
        $_centerDist_ = vars::distance * EVAL (1 / 0.01905);
        $_splashEdge_ = vars::radius * EVAL (1 / 0.01905);
        this.pythagorean_3D();
        
        Weapons.calculate_falloff();
        $_finalDamage_ := ($_damage_ * $_multiplier_ + 99) / 100;
        if (entity @s[tag=tf2.hit_by_projectile,tag=!tf2.origin]) {
            return run $_finalDamage_.get();
        }

        if (entity @s[tag=tf2.origin]) {
            $_finalDamage_ = $_selfDamage_;
        }
        $_splash_multiplier_ := 100 + ($_centerDist_ * -50 / $_splashEdge_);
        $_finalDamage_ := ($_finalDamage_ * $_splash_multiplier_ + 99) / 100;
        if (!entity @s[tag=tf2.origin,scores={tf2.class=4..5}]) {
            return run $_finalDamage_.get();
        }

        if ($playersHurt > 1) {
            return run $_finalDamage_.get();
        }
        // Less damage from your own explosions if nobody else is hurt
        // Soldier: 3/5 as much, Demo: 3/4 as much
        $_finalDamage_ := $_finalDamage_ * 3 / (9 - tf2.class:@s);
        return run $_finalDamage_.get();
    }
    function knockback() {
        player_motion.api.launch:$x := $output_vector_x * 12;
        player_motion.api.launch:$y := $output_vector_y * 12;
        player_motion.api.launch:$z := $output_vector_z * 12;
        function player_motion:api/launch_xyz;
    }
    function detonate_if_armed() {
        $arm_time = @s::item.components.minecraft:custom_data.projectile.arm_time * 20;
        if (tf2.age:@s < $arm_time) {
            return run this.fizzle();
        }
        this.impact();
    }
    function handle_rotation() {
        $mode = @s::item.components.minecraft:custom_data.projectile.rotation.mode;

        switch ($mode) {
            case Rotation.FIXED:
            break;

            case Rotation.CHASE:
            this.linear_velocity_to_quaternion();

            case Rotation.PHYSICAL:
            this.simulate_rotation();
        }   
    }
    function initial_rotation() {
        this.linear_velocity_to_quaternion();

        $input = $input_yaw;
        Math.cosine();
        tf2.ang_vel_x:@s := $output * $angular_speed / 1000;
        tf2.ang_vel_y:@s = random value -10..10;
        Math.sine();
        tf2.ang_vel_z:@s := $output * $angular_speed / 1000;

        Math.random_vector();
        Hardcode.repeatList( "[AXIS]", () => {
            tf2.ang_vel_[AXIS]:@s := (tf2.ang_vel_[AXIS]:@s * 2.5 + $output_vector_[AXIS]) / 2.5;
        }, ["x", "y", "z"] );

        // Initial rotation randomness
        Hardcode.repeatList(
            "[AXIS]",
            () => { $input_ang_vel_[AXIS] := {random value -10..10} * tf2.ang_vel_[AXIS]:@s / 100; },
            ["x", "y", "z"]
        );
        Math.angular_velocity_to_quaternion();
        Hardcode.repeatList(
            "[PARAM]",
            () => {
                $input_quaternion_1_[PARAM] = $output_quaternion_[PARAM];
                $input_quaternion_2_[PARAM] = tf2.quaternion_[PARAM]:@s;
            },
            ["r", "i", "j", "k"]
        );
        Math.multiply_quaternions();
        Hardcode.repeatList(
            "[PARAM]",
            () => { $input_quaternion_[PARAM] = $output_quaternion_[PARAM]; },
            ["r", "i", "j", "k"]
        );
        Math.normalize_quaternion();
        this.save_output_rotation_to_entity();
    }
    function linear_velocity_to_quaternion() {
        // Convert vector to gimbals
        $input_vec3.X = tf2.mot_x:@s;
        $input_vec3.Y = tf2.mot_y:@s;
        $input_vec3.Z = tf2.mot_z:@s;
        Math.vec_to_gimbal();

        $input_pitch = $output_pitch;
        $input_yaw = $output_yaw;
        Math.gimbal_to_quaternion();
        this.save_output_rotation_to_entity();
    }
    function test_linear_velocity() {   
        tf2.mot_x:@s = 0;
        tf2.mot_y:@s = 0;
        tf2.mot_z:@s = 1000;
        printf("Test 1: [x, y, z] = [&<tf2.mot_x:@s>, &<tf2.mot_y:@s>, &<tf2.mot_z:@s>]");
        this.linear_velocity_to_quaternion();
        printf("Test 1: [i, j, k, r] = [&<$input_quaternion_i>, &<$input_quaternion_j>, &<$input_quaternion_k>, &<$input_quaternion_r>]");
        printf("Test 1: expected [0, 0, 0, 1000]\n");

        this.linear_velocity_to_quaternion();
        printf("Test 2: [i, j, k, r] = [&<$input_quaternion_i>, &<$input_quaternion_j>, &<$input_quaternion_k>, &<$input_quaternion_r>]");
        printf("Test 2: expected [382, 0, 0, 923]\n");

        tf2.mot_x:@s = 814;
        tf2.mot_y:@s = 518;
        tf2.mot_z:@s = 259;
        printf("&<red>Test 2: [x, y, z] = [&<tf2.mot_x:@s>, &<tf2.mot_y:@s>, &<tf2.mot_z:@s>]");
        this.linear_velocity_to_quaternion();
        printf("&<red>Test 2: [i, j, k, r] = [&<$input_quaternion_i>, &<$input_quaternion_j>, &<$input_quaternion_k>, &<$input_quaternion_r>]\n");
        this.linear_velocity_to_quaternion();
        printf("Test 3: [i, j, k, r] = [&<$input_quaternion_i>, &<$input_quaternion_j>, &<$input_quaternion_k>, &<$input_quaternion_r>]");
        printf("Test 3: expected [-192, 577, 192, 769]\n");

    }
    function simulate_rotation() {
        // Apply friction to angular velocity
        $angular_drag = lookup::item.components.minecraft:custom_data.projectile.rotation.drag * 1000;
        $angular_collision_friction = lookup::item.components.minecraft:custom_data.projectile.rotation.collision_friction * 1000;
        Hardcode.repeatList(
            "[AXIS]",
            () => {
                $sign_[AXIS] = 1;
                if (tf2.ang_vel_[AXIS]:@s < 0) {$sign_[AXIS] = -1;}
                tf2.ang_vel_[AXIS]:@s *= $sign_[AXIS];
                tf2.ang_vel_[AXIS]:@s *= $angular_drag;
                tf2.ang_vel_[AXIS]:@s /= 1000;
                if (tf2.collision:@s == 1) expand {
                    tf2.ang_vel_[AXIS]:@s *= $angular_collision_friction;
                    tf2.ang_vel_[AXIS]:@s /= 1000;
                }
                tf2.ang_vel_[AXIS]:@s *= $sign_[AXIS];
            },
            ["x", "y", "z"]
        );

        // Apply angular acceleration based on surface grinding
        if (tf2.collision_x:@s != 0) {
            $surface_x = tf2.collision_x:@s; $surface_y = 0; $surface_z = 0;
            this.roll();
        }
        if (tf2.collision_y:@s != 0) {
            $surface_x = 0; $surface_y = tf2.collision_y:@s; $surface_z = 0;
            this.roll();
        }
        if (tf2.collision_z:@s != 0) {
            $surface_x = 0; $surface_y = 0; $surface_z = tf2.collision_z:@s;
            this.roll();
        }

        // Apply rotation
        Hardcode.repeatList(
            "[AXIS]",
            () => { $input_ang_vel_[AXIS] = tf2.ang_vel_[AXIS]:@s; },
            ["x", "y", "z"]
        );
        Math.angular_velocity_to_quaternion();
        Hardcode.repeatList(
            "[PARAM]",
            () => {
                $input_quaternion_1_[PARAM] = $output_quaternion_[PARAM];
                $input_quaternion_2_[PARAM] = tf2.quaternion_[PARAM]:@s;
            },
            ["r", "i", "j", "k"]
        );
        Math.multiply_quaternions();
        Hardcode.repeatList(
            "[PARAM]",
            () => { $input_quaternion_[PARAM] = $output_quaternion_[PARAM]; },
            ["r", "i", "j", "k"]
        );
        Math.normalize_quaternion();
        this.save_output_rotation_to_entity();
    }
    function save_output_rotation_to_entity() {
        Hardcode.repeatList(
            "[PARAM]",
            () => { tf2.quaternion_[PARAM]:@s = $output_quaternion_[PARAM]; },
            ["r", "i", "j", "k"]
        );
        gren::rotation = [0.0f,0.0f,0.0f,1.0f];
        Hardcode.repeatLists(
            ["[PARAM]", "[INDEX]"],
            () => { gren::rotation[[INDEX]] = 0.001 * (float) tf2.quaternion_[PARAM]:@s; },
            [
                ["r", "i", "j", "k"],
                ["3", "0", "1", "2"]
            ]
        );
        @s::transformation.right_rotation = gren::rotation;
    }
    function roll() {
        Hardcode.repeatList(
            "[AXIS]",
            () => {
                $input_vector_1_[AXIS] := ((tf2.mot_[AXIS]:@s * 1000) / tf2.hitbox_[AXIS]:@s) * 32;
                $input_vector_2_[AXIS] := $surface_[AXIS];
            },
            ["x", "y", "z"]
        );
        Math.cross_product();
        Hardcode.repeatList(
            "[AXIS]",
            () => {
                tf2.ang_vel_[AXIS]:@s += $output_vector_[AXIS];
            },
            ["x", "y", "z"]
        );
    }

    function remove_tags() {
        tag @s remove tf2.batch;
        tag @s remove tf2.search;
        tag @s remove tf2.opponent;
        tag @s remove tf2.in_voxel;
        tag @s remove tf2.hit_by_projectile;
        tag @s remove tf2.closest_hit;
    }
    function fizzle() {
        particle minecraft:poof;
        tag @s add tf2.delete;
    }
    function end_of_life() {
        tag @s add tf2.delete;
        $explode_after_lifetime = @s::item.components.minecraft:custom_data.projectile.explode_after_lifetime;
        if ($explode_after_lifetime) {
            this.impact();
        }
    }
}