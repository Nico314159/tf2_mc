// TODO: expand this section as time goes on

// See header file for gamemode key
Scoreboard.add(tf2.gamemode, dummy);

// Map key: 0 = ad_test, 1 = cp_test, 2 = koth_woodlands
Scoreboard.add(tf2.map, dummy);

Hardcode.repeatList(
    "objectiveName",
    () => {
        Scoreboard.add(tf2.objectiveName);
    },
    [
        "index", "red_progress", "blu_progress", "capture_threshold",
        "timer", "timer.min", "timer.sec", "increment", "max_timer", "respawn_timer", "respawn_timer.sec", 
        "red_timer", "red_timer.min", "red_timer.sec", "red_overtime",
        "blu_timer", "blu_timer.min", "blu_timer.sec", "blu_overtime",
        "batch_number", "session", "lifetime", "draw_delay", "size", "model_number", "age",
        "class", "last_class", "team", "max_health", "last_slot", "current_slot",
        "primary_clip", "primary_maxClip", "primary_ammo", "primary_maxAmmo",
        "secondary_clip", "secondary_maxClip", "secondary_ammo", "secondary_maxAmmo",
        "attack_delay", "reload_delay", "consecutive_reload", "time_idle",
        "time_revved", "rev_threshold", "time_scoped", "grace_period",
        "permanent.games_won", "permanent.games_played", "permanent.double_jumps",
        "fall_y", "fall_y1", "fall_y2", "fall_y3",
        "last_x", "now_x", "last_z", "now_z",
        "drown_lost", "time_surfaced", "current_air", "last_air",
        "is_invisible", "cloak", "disguise.class", "disguise.team", "disguise.primary_CMD",
        "door.wait", "door.time_open", "door.state", "door.id",
        "door.length", "door.pos", "door.vel", "door.accel", 
        "hits_taken", "ticks_since_hurt", "interpolate_rmb", "menu_ticks",
        "uuid.0", "uuid.1", "uuid.2", "uuid.3", "player.id", 
        "afterburn_ticks", "afterburn_length", "airblast_delay",
        "heal_target", "ubercharge",

        "x", "y", "z",
        "mot_x", "mot_y", "mot_z",
        "hitbox_x", "hitbox_y", "hitbox_z",
        "collision_x", "collision_y", "collision_z",
        "collision",
        "friction", "collision_friction",
        "halt",
        "quaternion_r", "quaternion_i", "quaternion_j", "quaternion_k",
        "ang_vel_x", "ang_vel_y", "ang_vel_z"
    ]
);

Scoreboard.add(tf2.health, dummy, "❤");
scoreboard objectives setdisplay below_name tf2.health;
Scoreboard.add(tf2.queue_type, trigger);
Scoreboard.add(tf2.coas, used:carrot_on_a_stick);
Scoreboard.add(tf2.elytra_detect, custom:aviate_one_cm);
Scoreboard.add(tf2.can_double_jump, dummy);
Scoreboard.add(tf2.fall, custom:fall_one_cm);
Scoreboard.add(tf2.air, air);
Scoreboard.add(tf2.food, food);

// when in score format - RED = 1, BLU = 2
Team.add(RED, "RED", {color: red,  prefix: "\"[RED] \"", friendlyFire: false, nametagVisibility: hideForOtherTeams});
Team.add(BLU, "BLU", {color: blue, prefix: "\"[BLU] \"", friendlyFire: false, nametagVisibility: hideForOtherTeams});

Hardcode.repeat("_i_", () => {
    Bossbar.add(tf2:timer__i_, "");
    Bossbar.add(tf2:red_timer__i_, "");
    bossbar set tf2:red_timer__i_ color red;
    Bossbar.add(tf2:blu_timer__i_, "");
    bossbar set tf2:blu_timer__i_ color blue;
}, 1, _INSTANCES_CAP_);

TextProp.clickURL("retina_link", "https://github.com/Nico314159/Retina_v2", true);
TextProp.hoverText("retina_hover", "https://github.com/Nico314159/Retina_v2", true);
$found_dependency ?= execute run function retina:__load__;
if (!$found_dependency) return run Text.tellraw(@a, "&<dark_red>[ERROR] &<red>Dependency &<aqua,underlined,retina_link,retina_hover>Retina 2&<red> was not found.");

TextProp.clickURL("delta_link", "https://github.com/MulverineX/player_motion", true);
TextProp.hoverText("delta_hover", "https://github.com/MulverineX/player_motion", true);
$found_dependency ?= execute run function player_motion:internal/technical/load;
if (!$found_dependency) return run Text.tellraw(@a, "&<dark_red>[ERROR] &<red>Dependency &<aqua,underlined,delta_link,delta_hover>player_motion&<red> was not found.");

$profiler_installed ?= execute run function timekeeper:__load__;

gamerule doImmediateRespawn true;
gamerule doMobSpawning false;
gamerule fallDamage false;
gamerule drowningDamage true;
gamerule keepInventory true;
gamerule mobGriefing false;
gamerule naturalRegeneration false;
gamerule showDeathMessages false;
gamerule disablePlayerMovementCheck true;

// testing purposes only
$Settings.show_debug_messages = true;

// map data
maps:: += {
    0: {
        name: "ad_test",
        origin: [-500.0d, 1.0d, -500.0d],
        spawn_point: {
            red: [[-487.0d, 1.0d, -487.0d]],
            blu: [[-513.0d, 1.0d, -513.0d]]
        },
        spawn_time: {red: [5.0f], blu: [5.0f]},
        objectives: [
            {Pos: [-509.5d, 1.0d, -499.5d], Tags: ["tf2.control_point"], data: {capture_threshold: 20.0f, team: 1b, increment: 60.0f}},
            {Pos: [-499.5d, 1.0d, -499.5d], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 20.0f, team: 1b, increment: 60.0f}},
            {Pos: [-489.5d, 1.0d, -499.5d], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 25.0f, team: 1b, increment: 60.0f}}
        ],
        gamemode: 1b,
        timer: 480.0f,
        setup_time: 30.0f
    },
    1: {
        name: "cp_test",
        origin: [-300.0d, 1.0d, -300.0d],
        spawn_point: {
            red: [[-279.0d, 1.0d, -300.0d]],
            blu: [[-321.0d, 1.0d, -300.0d]]
        },
        spawn_time: {red: [5.0f], blu: [5.0f]},
        objectives: [
            {Pos: [-311.5d, 1.0d, -303.5d], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 5.0f, team: 2b, increment: 600.0f}},
            {Pos: [-306.5d, 1.0d, -295.5d], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 15.0f, team: 2b, increment: 600.0f}},
            {Pos: [-299.5d, 1.0d, -299.5d], Tags: ["tf2.control_point"], data: {capture_threshold: 30.0f, team: 0b, increment: 600.0f}},
            {Pos: [-292.5d, 1.0d, -303.5d], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 15.0f, team: 1b, increment: 600.0f}},
            {Pos: [-287.5d, 1.0d, -295.5d], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 5.0f, team: 1b, increment: 600.0f}}
        ],
        gamemode: 2b,
        timer: 600.0f
    },
    2: {
        name: "koth_woodlands",
        origin: [1050.0d, 76.0d, 910.0d],
        spawn_point: {
            red: [[1002.5d, 76.0d, 934.5d]],
            blu: [[1098.0d, 68.0d, 882.5d]]
        },
        spawn_time: {red: [5.0f], blu: [5.0f]},
        spawn_doors: {
            red: [
                {Pos: [1008.0d, 67.0d, 932.0d], Rotation: [-90.0f, 0.0f], data: {dx:0, dy:4, dz:4, direct_tp: ""}},
                {Pos: [ 997.0d, 67.0d, 925.0d], Rotation: [-90.0f, 0.0f], data: {dx:10, dy:14, dz:18, direct_tp: "1009.5 67 934.5"}}
            ],
            blu: [
                {Pos: [1097.0d, 68.0d, 864.0d], Rotation: [ 90.0f, 0.0f], data: {dx:0, dy:3, dz:1, direct_tp: ""}}, 
                {Pos: [1098.0d, 68.0d, 863.0d], Rotation: [ 90.0f, 0.0f], data: {dx:3, dy:3, dz:22, direct_tp: "1096.0 68 865.0"}},
                {Pos: [1094.0d, 68.0d, 868.0d], Rotation: [ 90.0f, 0.0f], data: {dx:3, dy:3, dz:18, direct_tp: "1096.0 68 865.0"}},
                {Pos: [1093.0d, 69.0d, 868.0d], Rotation: [ 90.0f, 0.0f], data: {dx:0, dy:1, dz:18, direct_tp: ""}}
            ]
        },
        resupply_cabinets: {
            red: [{Pos: [ 997.45d, 67.52d, 932.0d], Rotation: [-90.0f, 0.0f]}],
            blu: [{Pos: [1101.59d, 68.52d, 885.0d], Rotation: [ 90.0f, 0.0f]}]
        },
        objectives: [
            {Pos: [1050.5d, 104.0d, 910.5d], Tags: ["tf2.control_point"], data: {capture_threshold: 20.0f, team: 0b}},
        ],
        pickups: [
            {Pos: [1054.5d, 67.0d, 946.5d], kind: "health", size: 1b},
            {Pos: [1051.5d, 75.0d, 909.5d], kind: "health", size: 1b},
            {Pos: [1017.5d, 67.0d, 943.5d], kind: "health", size: 1b},
            {Pos: [1061.0d, 71.0d, 893.0d], kind: "health", size: 1b},
            {Pos: [1067.5d, 79.0d, 947.5d], kind: "health", size: 1b},
            {Pos: [1058.5d, 99.5d, 909.5d], kind: "health", size: 1b},
            {Pos: [1019.5d, 69.5d, 866.5d], kind: "health", size: 1b},
            {Pos: [1048.5d, 67.0d, 865.5d], kind: "health", size: 2b},
            {Pos: [1056.0d, 67.0d, 914.0d], kind: "health", size: 2b},
            {Pos: [1081.0d, 76.0d, 888.0d], kind: "health", size: 2b},
            {Pos: [1036.0d, 69.0d, 889.0d], kind: "health", size: 2b},
            {Pos: [1027.0d, 67.0d, 912.0d], kind: "health", size: 2b},
            {Pos: [1069.0d, 75.5d, 902.0d], kind: "health", size: 3b},
            // ---------------------------------------------------- //
            {Pos: [1043.5d, 101.0d, 907.5d], kind: "ammo",  size: 1b},
            {Pos: [1065.5d, 67.0d, 898.5d],  kind: "ammo",  size: 1b},
            {Pos: [1056.5d, 67.5d, 935.5d],  kind: "ammo",  size: 1b},
            {Pos: [1042.5d, 85.0d, 913.5d],  kind: "ammo",  size: 1b},
            {Pos: [1049.0d, 67.0d, 885.0d],  kind: "ammo",  size: 2b},
            {Pos: [1047.5d, 67.0d, 916.5d],  kind: "ammo",  size: 2b},
            {Pos: [1084.5d, 68.0d, 918.5d],  kind: "ammo",  size: 2b},
            {Pos: [1017.0d, 67.0d, 962.0d],  kind: "ammo",  size: 2b},
            {Pos: [1057.0d, 74.0d, 884.3d],  kind: "ammo",  size: 2b},
            {Pos: [1085.5d, 69.7d, 888.5d],  kind: "ammo",  size: 3b}
        ],
        gamemode: 3b,
        timer: 180.0f
    },
    3: {
        name: "ad_gorge",
        origin: [1000.0, 100.0, -1000.0],
        spawn_point: {
            red: [[1126.5, 124.0, -787.5]],
            blu: [[1165.0, 115.0, -969.5], [1165.0, 115.0, -969.5], [1159.0, 127.0, -902.5]]
        },
        spawn_time: {
            red: [7.0, 7.0, 8.0],
            blu: [2.0, 2.0, 3.0]
        },
        spawn_doors: {
            red: [
                {Pos: [1145.0, 124.0, -785.0], Rotation: [- 90.0f, 0.0f], data: {dx:0, dy:1, dz:0, direct_tp: ""}},
                {Pos: [1133.0, 124.0, -787.0], Rotation: [- 90.0f, 0.0f], data: {dx:11, dy:1, dz:4, direct_tp: "1147.0 124 -784.5"}},
                {Pos: [1129.0, 124.0, -792.0], Rotation: [-180.0f, 0.0f], data: {dx:1, dy:1, dz:1, direct_tp: ""}},
                {Pos: [1131.0, 124.0, -791.0], Rotation: [-135.0f, 0.0f], data: {dx:0, dy:1, dz:0, direct_tp: ""}},
                {Pos: [1118.0, 124.0, -790.0], Rotation: [- 90.0f, 0.0f], data: {dx:13, dy:2, dz:12, direct_tp: "1131.5 124 -792.5"}},
                {Pos: [1121.0, 124.0, -793.0], Rotation: [- 90.0f, 0.0f], data: {dx:7, dy:2, dz:2, direct_tp: "1131.5 124 -792.5"}}
            ],
            blu: [
                {Pos: [1181.0, 115.0, -951.0], Rotation: [   0.0f, 0.0f], data: {dx:3, dy:2, dz:0, direct_tp: ""}},
                {Pos: [1173.0, 115.0, -965.3], Rotation: [   0.0f, 0.0f], data: {dx:11, dy:3, dz:12, direct_tp: "1183.0 115 -949.5"}},
                {Pos: [1166.0, 115.0, -952.0], Rotation: [   0.0f, 0.0f], data: {dx:3, dy:2, dz:0, direct_tp: ""}},
                {Pos: [1160.3, 115.0, -956.0], Rotation: [   0.0f, 0.0f], data: {dx:12, dy:2, dz:3, direct_tp: "1168.0 115 -950.5"}},
                {Pos: [1156.0, 115.0, -957.0], Rotation: [   0.0f, 0.0f], data: {dx:3, dy:3, dz:4, direct_tp: "1168.0 115 -950.5"}},
                {Pos: [1152.0, 115.0, -957.0], Rotation: [   0.0f, 0.0f], data: {dx:3, dy:5, dz:4, direct_tp: "1168.0 115 -950.5"}},
                {Pos: [1153.0, 115.0, -974.0], Rotation: [ 180.0f, 0.0f], data: {dx:19, dy:5, dz:16, direct_tp: "1168.0 115 -950.5"}},
                {Pos: [1142.0, 118.0, -959.0], Rotation: [  45.0f, 0.0f], data: {dx:1, dy:2, dz:0, direct_tp: ""}},
                {Pos: [1143.0, 118.0, -958.0], Rotation: [  45.0f, 0.0f], data: {dx:0, dy:2, dz:0, direct_tp: ""}},
                {Pos: [1144.0, 118.0, -970.0], Rotation: [  45.0f, 0.0f], data: {dx:7, dy:2, dz:17, direct_tp: "1141.5 118 -956.5"}},
                {Pos: [1141.0, 118.0, -964.0], Rotation: [  45.0f, 0.0f], data: {dx:2, dy:2, dz:4, direct_tp: "1141.5 118 -956.5"}},
                {Pos: [1153.0, 127.0, -898.0], Rotation: [   0.0f, 0.0f], data: {dx:2, dy:1, dz:0, direct_tp: ""}},
                {Pos: [1152.0, 127.0, -911.3], Rotation: [   0.0f, 0.0f], data: {dx:9, dy:2, dz:12, direct_tp: "1154.5 127 -896.5"}}
            ]
        },
        resupply_cabinets: {
            red: [{Pos: [1131.0, 124.52, -778.45], Rotation: [180.0f, 0.0f]}],
            blu: [{Pos: [1159.0, 127.52, -898.49], Rotation: [180.0f, 0.0f]},
                  {Pos: [1165.0, 115.52, -957.42], Rotation: [180.0f, 0.0f]}]
        },
        automatic_doors: [
            {Pos: [1166.00, 121d, -859.75], size: [6.0, 3.0, 0.5], wait: 600, path: "up", path_length: 3, state: Door.ALL_PROXIMITY, block: "oak_fence"},
            {Pos: [1126.00, 122d, -859.75], size: [7.0, 2.0, 0.5], wait: 600, path: "up", path_length: 2, state: Door.ALL_PROXIMITY, block: "oak_fence"},
            {Pos: [1152.00, 127d, -896.75], size: [5.0, 3.0, 0.5], wait: 15, path: "up", path_length: 2, state: Door.CLOSED, block: "oak_fence"},
            {Pos: [1145.00, 124d, -785.00], size: [0.999, 2.0, 1.0], wait: 15, path: "up", path_length: 3, state: Door.RED_PROXIMITY, block: "barrier"},
            {Pos: [1148.00, 127d, -827.80], size: [3.0, 3.0, 0.6], wait: -1, path: "east", path_length: 2.75, state: Door.CLOSED, block: "andesite_wall"},
            {Pos: [1162.25, 122d, -839.00], size: [0.5, 3.0, 4.0], wait: -1, path: "up", path_length: 4, state: Door.CLOSED, block: "oak_fence"},
            {Pos: [1165.00, 122d, -820.625], size: [5.0, 3.0, 0.5], wait: -1, path: "up", path_length: 2.75, state: Door.CLOSED, block: "oak_fence"}
        ],
        objectives: [
            {Pos: [1149.5, 121.0, -881.5], Tags: ["tf2.control_point"], data: {
                capture_threshold: 60.0f, team: 1b, increment: 480.0f,
                events: {
                    spawn_point: {blu:2}, spawn_time: {blu:2}, 
                    doors: [{id:2, state:Door.BLU_PROXIMITY}, {id:4, state:Door.OPEN}, {id:5, state:Door.OPEN}, {id:6, state:Door.OPEN}]
                }
            }},
            {Pos: [1149.5, 118.0, -811.5], Tags: ["tf2.control_point", "tf2.locked"], data: {capture_threshold: 12.0f, team: 1b}},
        ],
        pickups: [
            // toll booth
            {Pos: [1141.5, 118.5, -932.5], kind: "health", size: 2b},
            {Pos: [1143.0, 118.5, -932.5], kind: "ammo",   size: 3b},
            // upper deck
            {Pos: [1156.5, 122.5, -916.5], kind: "ammo",   size: 3b},
            {Pos: [1183.0, 122.5, -919.5], kind: "health", size: 2b},
            {Pos: [1183.0, 122.5, -921.5], kind: "ammo",   size: 3b},
            // checkpoint / water tank building
            {Pos: [1150.3, 118.0, -899.5], kind: "health", size: 2b},
            {Pos: [1148.7, 118.0, -899.5], kind: "ammo",   size: 2b},
            // under the point A bridge
            {Pos: [1149.5, 116.0, -885.0], kind: "health", size: 2b},
            // end of bridge outside facility
            {Pos: [1150.3, 121.0, -864.5], kind: "ammo",   size: 2b},
            {Pos: [1148.7, 121.0, -864.5], kind: "health", size: 2b},
            // flank hallway beneath stairs
            {Pos: [1169.5, 121.0, -844.5], kind: "ammo",   size: 3b},
            {Pos: [1167.5, 121.0, -844.5], kind: "health", size: 2b},
            // main hallway
            {Pos: [1126.5, 127.0, -852.5], kind: "ammo",   size: 2b},
            {Pos: [1131.3, 122.0, -833.5], kind: "ammo",   size: 2b},
            {Pos: [1132.7, 122.0, -833.5], kind: "health", size: 2b},
            // 2nd floor outside private room
            {Pos: [1160.5, 127.0, -832.2], kind: "ammo",   size: 2b},
            {Pos: [1160.5, 127.0, -830.8], kind: "health", size: 2b},
            // 2nd floor corner above octagon
            {Pos: [1166.8, 127.0, -821.5], kind: "health", size: 1b},
            {Pos: [1165.2, 127.0, -821.5], kind: "ammo",   size: 2b},
            // final room - lower octagon
            {Pos: [1170.2, 122.0, -803.7], kind: "health", size: 2b},
            {Pos: [1170.2, 122.0, -802.3], kind: "ammo",   size: 2b},
            {Pos: [1149.5, 118.0, -798.5], kind: "health", size: 2b},
            {Pos: [1139.5, 118.0, -813.5], kind: "ammo",   size: 2b},
            {Pos: [1159.5, 118.0, -813.5], kind: "ammo",   size: 2b}
        ],
        gamemode: 1,
        timer: 360.0,
        setup_time: 60.0
    },
    4: {
        name: "koth_harvest",
        origin: [-1000.0, 100.0, -1000.0],
        spawn_point: {
            red: [[-1083.5, 74.0, -1048.5]],
            blu: [[-1008.5, 74.0, -1027.5]]
        },
        spawn_time: {
            red: [6.0],
            blu: [6.0]
        },
        spawn_doors: {
            red: [
                {Pos: [-1082.0, 74.0, -1053.0], Rotation: [180.0f, 0.0f], data: {dx:0, dy:1, dz:0, direct_tp: ""}},
                {Pos: [-1091.0, 74.0, -1052.0], Rotation: [180.0f, 0.0f], data: {dx:10, dy:1, dz:3, direct_tp: "-1081.5 74 -1053.5"}},
                {Pos: [-1091.0, 74.0, -1049.0], Rotation: [  0.0f, 0.0f], data: {dx:10, dy:1, dz:3, direct_tp: "-1081.5 74 -1043.5"}},
                {Pos: [-1082.0, 74.0, -1045.0], Rotation: [  0.0f, 0.0f], data: {dx:0, dy:1, dz:0, direct_tp: ""}}
            ],
            blu: [
                {Pos: [-1011.0, 74.0, -1032.0], Rotation: [180.0f, 0.0f], data: {dx:0, dy:1, dz:0, direct_tp: ""}},
                {Pos: [-1012.0, 74.0, -1031.0], Rotation: [180.0f, 0.0f], data: {dx:10, dy:1, dz:3, direct_tp: "-1010.5 74 -1032.5"}},
                {Pos: [-1012.0, 74.0, -1028.0], Rotation: [  0.0f, 0.0f], data: {dx:10, dy:1, dz:3, direct_tp: "-1010.5 74 -1022.5"}},
                {Pos: [-1011.0, 74.0, -1024.0], Rotation: [  0.0f, 0.0f], data: {dx:0, dy:1, dz:0, direct_tp: ""}}
            ]
        },
        resupply_cabinets: {
            red: [{Pos: [-1080.5, 74.52, -1048.5], Rotation: [90.0f, 0.0f]}],
            blu: [{Pos: [-1011.5, 74.52, -1027.5], Rotation: [-90.0f, 0.0f]}]
        },
        automatic_doors: [
            // RED spawn
            {Pos: [-1082.00, 74.0, -1052.75], size: [1.0, 2.0, 0.5], wait: 20, path: "up", path_length: 1.9, state: Door.RED_PROXIMITY, block: "oak_fence"},
            {Pos: [-1082.00, 74.0, -1044.75], size: [1.0, 2.0, 0.5], wait: 20, path: "up", path_length: 1.9, state: Door.RED_PROXIMITY, block: "oak_fence"},
            // BLU spawn
            {Pos: [-1011.00, 74.0, -1031.75], size: [1.0, 2.0, 0.5], wait: 20, path: "up", path_length: 1.9, state: Door.BLU_PROXIMITY, block: "oak_fence"},
            {Pos: [-1011.00, 74.0, -1023.75], size: [1.0, 2.0, 0.5], wait: 20, path: "up", path_length: 1.9, state: Door.BLU_PROXIMITY, block: "oak_fence"},
            // BLU farmhouse - all decorative / locked
            {Pos: [-1028.00, 75.0, -1039.60], size: [4.0, 3.0, 0.5], path: "up", path_length: 3, state: Door.CLOSED, block: "barrier"},
            {Pos: [-1024.00, 75.0, -1010.00], size: [0.5, 3.0, 3.0], path: "up", path_length: 3, state: Door.CLOSED, block: "barrier"},
            {Pos: [-1042.00, 75.0, -1007.00], size: [4.0, 3.0, 0.5], path: "up", path_length: 3, state: Door.CLOSED, block: "barrier"},
            {Pos: [-1016.90, 74.0, -1054.00], size: [0.5, 3.0, 4.0], path: "up", path_length: 3, state: Door.CLOSED, block: "barrier"},
            {Pos: [-1013.00, 74.0, -1035.60], size: [4.0, 3.0, 0.5], path: "up", path_length: 3, state: Door.CLOSED, block: "barrier"}
        ],
        objectives: [
            {Pos: [-1046d, 75d, -1038d], Tags: ["tf2.control_point"], data: {capture_threshold: 16.0f, team: 0b}}
        ],
        pickups: [
            // RED shack
            {Pos: [-1062.5, 76.0, -1017.0], kind: "health", size: 2b},
            {Pos: [-1068.5, 76.0, -1017.0], kind: "ammo", size: 2b},
            // RED truck
            {Pos: [-1043.0, 74.0, -1067.0], kind: "health", size: 1b},
            // RED farmhouse
            {Pos: [-1067.5, 75.0, -1037.5], kind: "health", size: 1b},
            {Pos: [-1060.5, 75.0, -1030.5], kind: "ammo", size: 2b},
            {Pos: [-1053.5, 75.0, -1061.5], kind: "ammo", size: 2b},
            // RED upstairs
            {Pos: [-1056.25, 81.0, -1064.5], kind: "health", size: 2b},
            {Pos: [-1057.75, 81.0, -1064.5], kind: "ammo", size: 2b},

            // BLU shack
            {Pos: [-1029.5, 76.0, -1059.0], kind: "health", size: 2b},
            {Pos: [-1023.5, 76.0, -1059.0], kind: "ammo", size: 2b},
            // BLU truck
            {Pos: [-1049.0, 74.0, -1009.0], kind: "health", size: 1b},
            // BLU farmhouse
            {Pos: [-1024.5, 75.0, -1038.5], kind: "health", size: 1b},
            {Pos: [-1031.5, 75.0, -1045.5], kind: "ammo", size: 2b},
            {Pos: [-1038.5, 75.0, -1014.5], kind: "ammo", size: 2b},
            // BLU upstairs
            {Pos: [-1035.75, 81.0, -1011.5], kind: "health", size: 2b},
            {Pos: [-1034.25, 81.0, -1011.5], kind: "ammo", size: 2b}
        ],
        gamemode: 3b,
        timer: 180.0f
    }
};

new predicate(coin_flip) {
    "condition": "minecraft:random_chance",
    "chance": 0.5
}
new predicate(sprinting) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_sprinting": true
		}
	}
}
new predicate(sneaking) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_sneaking": true
		}
	}
}
new predicate(submerged) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:location_check",
            "offsetY": 1,
            "predicate": {
                "fluid": {
                    "fluids": "minecraft:water"
                }
            }
        },
        {
            "condition": "minecraft:location_check",
            "offsetY": 1,
            "predicate": {
                "fluid": {
                    "fluids": "minecraft:flowing_water"
                }
            }
        },
        {
            "condition": "minecraft:location_check",
            "offsetY": 1,
            "predicate": {
                "block": {
                    "state": {
                        "waterlogged": "true"
                    }
                }
            }
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "flags": {
                    "is_swimming": true
                }
            }
        }
    ]
}
new predicate(burning) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_on_fire": true
		}
	}
}
new predicate(grounded) {
    "condition": "minecraft:inverted",
    "term": {
        "condition": "minecraft:entity_properties",
        "entity": "this",
        "predicate": {
            "stepping_on": {
                "block": {
                    "blocks": ["minecraft:air"]
                }
            }
        }
    }
}
new predicate(no_vehicle) {
    "condition": "minecraft:inverted",
    "term": {
        "condition": "minecraft:entity_properties",
        "entity": "this",
        "predicate": {
            "vehicle": {}
        }
    }
}
new tags.entity_type(player_like) {
    "replace": false,
    "values": ["minecraft:player", "minecraft:villager", "minecraft:blaze"]
}
new tag.block(no_fall_dmg) {
    "values": [
        "minecraft:powder_snow",
        "minecraft:sweet_berry_bush",
        "minecraft:ladder",
        "minecraft:vine",
        "minecraft:cobweb",
        "minecraft:water"
    ]
}
new tag.block(reduce_fall_dmg) {
    "values": [
        "minecraft:hay_block",
        "minecraft:honey_block"
    ]
}

// Need to define this *before* importing weapon/class files
new loot_table(crossbow_base) {
    "pools": [
        {
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:item",
                    "name": "minecraft:crossbow",
                    "functions": [
                        {
                            "function": "minecraft:reference",
                            "name": "tf2:load_crossbow",
                            "conditions": [
                                {
                                    "condition": "minecraft:entity_scores",
                                    "entity": "this",
                                    "scores": {
                                        "tf2.attack_delay": {"max": 1000}
                                    }
                                },
                                {
                                    "condition": "minecraft:reference",
                                    "name": "tf2:ammo_in_clip"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}

new loot_table(melee_base) {
    "pools": [
        {
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:alternatives",
                    "children": [
                        {
                            "type": "minecraft:item",
                            "name": "minecraft:snowball",
                            "conditions": [
                                {
                                    "condition": "minecraft:entity_scores",
                                    "entity": "this",
                                    "scores": {
                                        "tf2.attack_delay": {"max": 1000}
                                    }
                                }
                            ]
                        },
                        {
                            "type": "minecraft:item",
                            "name": "minecraft:white_dye"
                        }
                    ]
                }
            ]
        }
    ]
}
new loot_table(sniper_base) {
	"pools": [
		{
			"rolls": 1,
			"entries": [
				{
					"type": "minecraft:alternatives",
					"children": [
						{
							"type": "minecraft:item",
							"name": "minecraft:spyglass",
							"functions": [
								{
									"function": "minecraft:set_custom_model_data",
									"flags": {
										"values": [true],
										"mode": "append"
									}
								}
							],
							"conditions": [
								{
									"condition": "minecraft:entity_scores",
									"entity": "this",
									"scores": {
										"tf2.attack_delay": {
											"max": 1000
										}
									}
								}
							]
						},
						{
							"type": "minecraft:item",
							"name": "minecraft:crossbow"
						}
					]
				}
			]
		}
	]
}


if (!$initialization_complete) {
    // Sets up NBT paths & defaults for game settings.
    // Only runs the very first time the pack is loaded.

    // TODO: replace line below when voting system is added
    $Settings.choose_map_randomly = true;
    $Settings.random_crits = $Settings.random_spread
                           = $Settings.use_server_mods
                           = $Settings.chat_bot
                           = false;
    $Settings.max_batches = 1;

    actionbar:: += {string:'[""]'};
    summon:: += {};
    index:: += {};
    lookup:: += {points:[{}]};
    control_points:: += {info:[
        [],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ]
    ]};

    // this could *technically* be part of the previous command, but then it would be so long that it's a total PITA.
    Hardcode.repeat("_i_", () => {
        Hardcode.repeat("_j_", () => {
            control_points::info[_i_][_j_].main = '[{"nbt":"info[_i_][_j_].owner","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].progress","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].symbol","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].extra","storage":"tf2:control_points","interpret":true,"font":"tf2:square"}]';
        }, start=0, stop=7);
    }, start=1, stop=_INSTANCES_CAP_);

    Hardcode.repeat("_i_", () => {
        running_games::_i_ = {};
    }, start=1, stop=_INSTANCES_CAP_);
    $initialization_complete = true;
}
$Settings.max_batches < EVAL(_INSTANCES_CAP_ - 1);

// markers keep track of gamestate
$batch_markers = execute if entity @e[type=marker,tag=tf2.batch];
if ($batch_markers != $Settings.max_batches) setup_markers();

// restart failsafe
import "session";
if (!entity @a) {
    Session.increment_all_globals();
}

// temporary workaround
forceload add 1136 -960;
forceload add 1152 -960;
forceload add 1168 -960;

// also temporary until I set up a better system
import "static_props";
load_static_props();

return 1;