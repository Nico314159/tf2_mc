class Math {
    function macro_random() {
        // @needs_macro
        $ return run random value $(min)..$(max);
    }

    function harmonic_series() {
        // Calculates the nth partial sum of the harmonic series. (1 + 1/2 + 1/3 + ... + 1/n)
        //
        // @input
        //      $bound: The upper bound of summation (in other words, the value of n).
        // @output
        //      $sum: The result of the sum, scaled up by 1000. (ex: 1.5 becomes 1500)
        //
        // @loop
        //      $index: The index of summation (denominator of the current term).
        //      $add: Current term on the iteration of the loop. Equal to `1000 / $index`.

        $sum = 0;
        for ($index = 1; $index <= $bound; $index ++;) {
            $add = 1000;
            $add /= $index;
            $sum += $add;
        }
    }
    function arctangent() {
        // Get quadrant of inputs
        $quadrant_X = 1;
        if ($input_X <= -1) expand {
            $quadrant_X = -1;
            $input_X *= -1;
        }

        $quadrant_Y = 1;
        if ($input_Y <= -1) expand {
            $quadrant_Y = -1;
            $input_Y *= -1;
        } 

        // Switch around inputs if ratio demands it
        $arctangent_swap_boolean = false;
        if ($input_X < $input_Y) expand {
            $arctangent_swap_boolean = true;
            $input_X >< $input_Y;
        } 

        // Compute function
        $math_trigonometry_0 = $input_Y;
        $math_trigonometry_0 *= 10000;
        $math_trigonometry_0 /= $input_X;
        $math_trigonometry_1 = $math_trigonometry_0;
        $math_trigonometry_0 *= $math_trigonometry_0;
        $math_trigonometry_0 /= 10000;

        $math_trigonometry_2 = 7765;
        $math_trigonometry_3 = -28743;
        $math_trigonometry_4 = 99518;

        $math_trigonometry_4 *= $math_trigonometry_1;

        $math_trigonometry_1 *= $math_trigonometry_0;
        $math_trigonometry_1 /= 10000;

        $math_trigonometry_3 *= $math_trigonometry_1;

        $math_trigonometry_1 *= $math_trigonometry_0;
        $math_trigonometry_1 /= 10000;

        $math_trigonometry_2 *= $math_trigonometry_1;

        $output = $math_trigonometry_2;
        $output += $math_trigonometry_3;
        $output += $math_trigonometry_4;
        $output /= 100000;

        $output *= 9000;
        $output /= 15707;

        // Adjust for swap and quadrant
        if ($arctangent_swap_boolean) expand {
            $output *= -1;
            $output += 9000;
        }

        if ($quadrant_X == -1 && $quadrant_Y == -1) {
            $output -= 18000;
        }
        if ($quadrant_X == -1 && $quadrant_Y == 1) expand {
            $output *= -1; $output += 18000;
        }
        if ($quadrant_X == 1 && $quadrant_Y == -1) {
            $output *= -1;
        }
    }
    function vec_to_gimbal() {
        // Get yaw from vector
        $input_X = $input_vec3.Z;
        $input_Y = $input_vec3.X;
        $input_Y *= -1;
        Math.arctangent();
        $output_yaw = $output;

        // Compute length of horizontal component of vector
        $temp_vec2.X = $input_vec3.X;
        $temp_vec2.X *= $temp_vec2.X;
        $temp_vec2.Y = $input_vec3.Z;
        $temp_vec2.Y *= $temp_vec2.Y;
        $radicand = $temp_vec2.X;
        $radicand += $temp_vec2.Y;
        $length = Math.sqrt($radicand);

        // Get pitch from vector
        $input_X = $length;
        $input_Y = $input_vec3.Y;
        $input_Y *= -1;
        Math.arctangent();
        $output_pitch = $output;
    }

    function dot_product() {
        $math_term_0 = $input_vector_1_x;
        $math_term_0 *= $input_vector_2_x;
        $math_term_1 = $input_vector_1_y;
        $math_term_1 *= $input_vector_2_y;
        $math_term_2 = $input_vector_1_z;
        $math_term_2 *= $input_vector_2_z;
        $output = $math_term_0;
        $output += $math_term_1;
        $output += $math_term_2;
        $dot_product = $output /= 1000;
    }
   
    function feed_left() {
        Hardcode.repeatList("[axis]", () => {$input_vector_1_[axis] = $output_vector_[axis];}, ["x", "y", "z"]);
    }

    function feed_right() {
        Hardcode.repeatList("[axis]", () => {$input_vector_2_[axis] = $output_vector_[axis];}, ["x", "y", "z"]);
    }



    function cross_product() {
        $math_term_0 = $input_vector_1_y;
        $math_term_0 *= $input_vector_2_z;
        $math_term_1 = $input_vector_1_z;
        $math_term_1 *= $input_vector_2_y;
        $output_vector_x = $math_term_0;
        $output_vector_x -= $math_term_1;
        $output_vector_x /= 1000;

        $math_term_0 = $input_vector_1_z;
        $math_term_0 *= $input_vector_2_x;
        $math_term_1 = $input_vector_1_x;
        $math_term_1 *= $input_vector_2_z;
        $output_vector_y = $math_term_0;
        $output_vector_y -= $math_term_1;
        $output_vector_y /= 1000;

        $math_term_0 = $input_vector_1_x;
        $math_term_0 *= $input_vector_2_y;
        $math_term_1 = $input_vector_1_y;
        $math_term_1 *= $input_vector_2_x;
        $output_vector_z = $math_term_0;
        $output_vector_z -= $math_term_1;
        $output_vector_z /= 1000;
    }

    function cosine() {
        // Transform input
        $output = $input;
        $output -= 900;
        $output %= 1800;
        $output -= 900;

        // Compute Bhaskara's approximation
        $output *= $output;
        $trig_0 = $output;
        $trig_0 += 3240000;
        $trig_0 /= 1000;
        $output *= -4;
        $output += 3240000;
        $output /= $trig_0;

        // Apply sign
        $trig_0 = $input;
        $trig_0 += 900;
        $trig_0 %= 3600;
        if ($trig_0 >= 1800) $output *= -1;
    }

    function sine() {
        // Transform input
        $output = $input;
        $output -= 1800;
        $output %= 1800;
        $output -= 900;

        // Compute Bhaskara's approximation
        $output *= $output;
        $trig_0 = $output;
        $trig_0 += 3240000;
        $trig_0 /= 1000;
        $output *= -4;
        $output += 3240000;
        $output /= $trig_0;

        // Apply sign
        $trig_0 = $input;
        $trig_0 %= 3600;
        if ($trig_0 >= 1800) $output *= -1;
    }



    function multiply_quaternions() {
        $math_quaternion_r = $input_quaternion_1_r;
        $math_quaternion_r *= $input_quaternion_2_r;
        $math_quaternion_i = $input_quaternion_1_i;
        $math_quaternion_i *= $input_quaternion_2_i;
        $math_quaternion_j = $input_quaternion_1_j;
        $math_quaternion_j *= $input_quaternion_2_j;
        $math_quaternion_k = $input_quaternion_1_k;
        $math_quaternion_k *= $input_quaternion_2_k;

        $output_quaternion_r = $math_quaternion_r;
        $output_quaternion_r -= $math_quaternion_i;
        $output_quaternion_r -= $math_quaternion_j;
        $output_quaternion_r -= $math_quaternion_k;
        $output_quaternion_r /= 1000;


        $math_quaternion_r = $input_quaternion_1_r;
        $math_quaternion_r *= $input_quaternion_2_i;
        $math_quaternion_i = $input_quaternion_1_i;
        $math_quaternion_i *= $input_quaternion_2_r;
        $math_quaternion_j = $input_quaternion_1_j;
        $math_quaternion_j *= $input_quaternion_2_k;
        $math_quaternion_k = $input_quaternion_1_k;
        $math_quaternion_k *= $input_quaternion_2_j;

        $output_quaternion_i = $math_quaternion_r;
        $output_quaternion_i += $math_quaternion_i;
        $output_quaternion_i += $math_quaternion_j;
        $output_quaternion_i -= $math_quaternion_k;
        $output_quaternion_i /= 1000;


        $math_quaternion_r = $input_quaternion_1_r;
        $math_quaternion_r *= $input_quaternion_2_j;
        $math_quaternion_i = $input_quaternion_1_i;
        $math_quaternion_i *= $input_quaternion_2_k;
        $math_quaternion_j = $input_quaternion_1_j;
        $math_quaternion_j *= $input_quaternion_2_r;
        $math_quaternion_k = $input_quaternion_1_k;
        $math_quaternion_k *= $input_quaternion_2_i;

        $output_quaternion_j = $math_quaternion_r;
        $output_quaternion_j -= $math_quaternion_i;
        $output_quaternion_j += $math_quaternion_j;
        $output_quaternion_j += $math_quaternion_k;
        $output_quaternion_j /= 1000;


        $math_quaternion_r = $input_quaternion_1_r;
        $math_quaternion_r *= $input_quaternion_2_k;
        $math_quaternion_i = $input_quaternion_1_i;
        $math_quaternion_i *= $input_quaternion_2_j;
        $math_quaternion_j = $input_quaternion_1_j;
        $math_quaternion_j *= $input_quaternion_2_i;
        $math_quaternion_k = $input_quaternion_1_k;
        $math_quaternion_k *= $input_quaternion_2_r;

        $output_quaternion_k = $math_quaternion_r;
        $output_quaternion_k += $math_quaternion_i;
        $output_quaternion_k -= $math_quaternion_j;
        $output_quaternion_k += $math_quaternion_k;
        $output_quaternion_k /= 1000;
    }


    function normalize_quaternion() {
        $magnitude = 0;
        Hardcode.repeatList(
            "[PARAM]",
            () => {
                $math_quaternion_[PARAM] = $input_quaternion_[PARAM];
                $math_quaternion_[PARAM] *= $math_quaternion_[PARAM];
                $magnitude += $math_quaternion_[PARAM];
            },
            ["r", "i", "j", "k"]
        );
        $magnitude = Math.sqrt($magnitude);

        Hardcode.repeatList(
            "[PARAM]",
            () => {
                $output_quaternion_[PARAM] = $input_quaternion_[PARAM];
                $output_quaternion_[PARAM] *= 1000;
                $output_quaternion_[PARAM] /= $magnitude;
            },
            ["r", "i", "j", "k"]
        );

        if ($magnitude = 0) $output_quaternion_r = 1000;
    }


    function facing_vector() {
        $input_pitch = @s::Rotation[1] * 10;
        $input_yaw = @s::Rotation[0] * 10;
        this.gimbal_to_vector();
    }

    function gimbal_to_vector() {
        $input = $input_yaw;
        this.sine();
        $output_vector_x = $output;
        $output_vector_x *= -1;
        this.cosine();
        $output_vector_z = $output;

        $input = $input_pitch;
        this.cosine();
        $output_vector_horizontal = $output;
        $output_vector_x *= $output;
        $output_vector_z *= $output;
        $output_vector_x /= 1000;
        $output_vector_z /= 1000;
        this.sine();
        $output_vector_y = $output;
        $output_vector_y *= -1;
    }

    function gimbal_to_matrix() {
        // Get sine and cosine values of yaw and pitch
        $input = $input_pitch;
        Math.sine();
        $sin_X = $output;
        $sin_X *= Retina.SCALE;
        $sin_X /= 1000;
        Math.cosine();
        $cos_X = $output;
        $cos_X *= Retina.SCALE;
        $cos_X /= 1000;

        $input = $input_yaw;
        Math.sine();
        $sin_Y = $output;
        $sin_Y *= Retina.SCALE;
        $sin_Y /= 1000;
        Math.cosine();
        $cos_Y = $output;
        $cos_Y *= Retina.SCALE;
        $cos_Y /= 1000;

        // Compute vectors of matrix
        $output_matrix_XX = $cos_Y;
        $output_matrix_XY = 0;
        $output_matrix_XZ = $sin_Y;

        $output_matrix_YX = $sin_Y;
        $output_matrix_YX *= $sin_X;
        $output_matrix_YX *= -1;
        $output_matrix_YX /= Retina.SCALE;
        $output_matrix_YY = $cos_X;
        $output_matrix_YZ = $cos_Y;
        $output_matrix_YZ *= $sin_X;
        $output_matrix_YZ /= Retina.SCALE;

        $output_matrix_ZX = $sin_Y;
        $output_matrix_ZX *= $cos_X;
        $output_matrix_ZX *= -1;
        $output_matrix_ZX /= Retina.SCALE;
        $output_matrix_ZY = $sin_X;
        $output_matrix_ZY *= -1;
        $output_matrix_ZZ = $cos_Y;
        $output_matrix_ZZ *= $cos_X;
        $output_matrix_ZZ /= Retina.SCALE;
    }


    function axis_to_quaternion() {
        $input = $input_angle;
        $input %= 3600;
        $input /= 2;

        this.cosine();
        $output_quaternion_r = $output;

        this.sine();
        Hardcode.repeatLists(
            ["[AXIS]", "[PARAM]"],
            () => {
                $output_quaternion_[PARAM] = $input_axis_[AXIS];
                $output_quaternion_[PARAM] *= $output;
                $output_quaternion_[PARAM] /= 1000;
            },
            [["x", "y", "z"],
             ["i", "j", "k"]]
        );
    }


    function angular_velocity_to_quaternion() {
        $magnitude = 0;
        Hardcode.repeatList(
            "[AXIS]",
            () => {
                $math_[AXIS] = $input_ang_vel_[AXIS];
                $math_[AXIS] *= $math_[AXIS];
                $magnitude += $math_[AXIS];
            },
            ["x", "y", "z"]
        );
        $magnitude = Math.sqrt($magnitude);

        Hardcode.repeatList(
            "[AXIS]",
            () => {
                $input_axis_[AXIS] = $input_ang_vel_[AXIS];
                $input_axis_[AXIS] *= 1000;
                $input_axis_[AXIS] /= $magnitude;
            },
            ["x", "y", "z"]
        );

        $input_angle = $magnitude;
        $input_angle *= 1800;
        $input_angle /= 3141;
        this.axis_to_quaternion();
    }


    function random_vector() {
        $input = random value 0..3599;
        this.cosine();
        $output_vector_x = $output;
        this.sine();
        $output_vector_y = $output;

        $output_vector_z = random value -1000..1000;
        $math_inverse_z = $output_vector_z;
        $math_inverse_z *= $math_inverse_z;
        $math_inverse_z *= -1;
        $math_inverse_z += 1000000;
        $math_inverse_z = Math.sqrt($math_inverse_z);

        $output_vector_x *= $math_inverse_z;
        $output_vector_y *= $math_inverse_z;
        $output_vector_x /= 1000;
        $output_vector_y /= 1000;

        $math_vector_x = $output_vector_x;
        $math_vector_y = $output_vector_y;
        $math_vector_z = $output_vector_z;
        $math_vector_x *= $output_vector_x;
        $math_vector_y *= $output_vector_y;
        $math_vector_z *= $output_vector_z;
        $magnitude = $math_vector_x;
        $magnitude += $math_vector_y;
        $magnitude += $math_vector_z;
    }


    function random_quaternion() {
        this.random_vector();
        $output_quaternion_i = $output_vector_x;
        $output_quaternion_j = $output_vector_y;
        $output_quaternion_k = $output_vector_z;

        $input = random value 0..3599;
        this.cosine();
        $output_quaternion_r = $output;
        this.sine();
        $magnitude = $output;

        $output_quaternion_i *= $magnitude;
        $output_quaternion_j *= $magnitude;
        $output_quaternion_k *= $magnitude;
        $output_quaternion_i /= 1000;
        $output_quaternion_j /= 1000;
        $output_quaternion_k /= 1000;
    }



    function test_sine_and_cosine() {
        Hardcode.repeat("[VALUE]",
            () => {
                $input = [VALUE];
                this.cosine();
                $cosine = $output;
                this.sine();
                $sine = $output;
                Text.tellraw(@a, "angle: &<$input>, cosine: &<$cosine>, sine: &<$sine>");
            },
            start=0, stop=3599, step=50
        );
    }




    class Sway_Heave_Surge {
        function find() {
            $input_vector_x = $i;
            $input_vector_x *= 2;
            $input_vector_x += 10;
            $input_vector_x -= $horizontal_count;
            if ($horizontal_count == 10) expand {
                $input_vector_x = execute run random value 2..6;
                $input_vector_x %= 3;
                $input_vector_x --;
                $input_vector_x *= 20;
            }
            $spread = Math.random($spread_least, $spread_most);
            $input_vector_x *= $spread;
            $input_vector_x /= 100;

            $input_vector_y = $j;
            $input_vector_y *= 2;
            $input_vector_y += 10;
            $input_vector_y -= $vertical_count;
            if ($vertical_count == 10) expand {
                $input_vector_y = execute run random value 2..6;
                $input_vector_y %= 3;
                $input_vector_y --;
                $input_vector_y *= 20;
            }
            $spread = Math.random($spread_least, $spread_most);
            $input_vector_y *= $spread;
            $input_vector_y /= 100;

            $input_vector_z = 500;
            if ($debug_messages) Text.tellraw(@a, "Input Vector: &<red, italic>[&<$input_vector_x, italic>, &<$input_vector_y, italic>, &<$input_vector_z, italic>]"); 
        }
        function apply() {
            $length = 0;
            Hardcode.repeatList("[axis]", () => {$temp = $input_vector_[axis]; $temp *= $input_vector_[axis]; $length += $temp;}, ["x", "y", "z"]);
            $length = Math.sqrt($length);
            Hardcode.repeatList("[pair]", () => {$input_matrix_[pair] = $output_matrix_[pair];}, ["XX", "XY", "XZ", "YX", "YY", "YZ", "ZX", "ZY", "ZZ"]);
            Math.matrix_transform();
            Hardcode.repeatList("[axis]", () => {$output_vector_[axis] *= Retina.SCALE; $output_vector_[axis] /= $length;}, ["x", "y", "z"]);
            if ($debug_messages) Text.tellraw(@a, "Angled Vector: &<gold, italic>[&<$output_vector_x, italic>, &<$output_vector_y, italic>, &<$output_vector_z, italic>]");
        }
    }
    function matrix_transform() {
        // Perform linear transformation
        $matrix_column_0 = $input_matrix_XX;
        $matrix_column_1 = $input_matrix_YX;
        $matrix_column_2 = $input_matrix_ZX;
        $matrix_column_0 *= $input_vector_x;
        $matrix_column_1 *= $input_vector_y;
        $matrix_column_2 *= $input_vector_z;
        $output_vector_x = $matrix_column_0;
        $output_vector_x += $matrix_column_1;
        $output_vector_x += $matrix_column_2;
        $output_vector_x /= Retina.SCALE;

        $matrix_column_0 = $input_matrix_XY;
        $matrix_column_1 = $input_matrix_YY;
        $matrix_column_2 = $input_matrix_ZY;
        $matrix_column_0 *= $input_vector_x;
        $matrix_column_1 *= $input_vector_y;
        $matrix_column_2 *= $input_vector_z;
        $output_vector_y = $matrix_column_0;
        $output_vector_y += $matrix_column_1;
        $output_vector_y += $matrix_column_2;
        $output_vector_y /= Retina.SCALE;

        $matrix_column_0 = $input_matrix_XZ;
        $matrix_column_1 = $input_matrix_YZ;
        $matrix_column_2 = $input_matrix_ZZ;
        $matrix_column_0 *= $input_vector_x;
        $matrix_column_1 *= $input_vector_y;
        $matrix_column_2 *= $input_vector_z;
        $output_vector_z = $matrix_column_0;
        $output_vector_z += $matrix_column_1;
        $output_vector_z += $matrix_column_2;
        $output_vector_z /= Retina.SCALE;
    }
}