new trim_pattern(sniper) {
    "asset_id": "tf2:sniper",
    "description": {
        "translate": "trim_pattern.tf2.sniper"
    },
    "template_item": "minecraft:arrow"
}
generate_body_model(sniper);

JMC.python(`
make_weapon(
    Class.SNIPER, slot=0, name='Sniper Rifle',
    base_item="tf2:sniper_base",
    display_name={
        "translate": "tf2.sniper_rifle",
        "fallback": "Sniper Rifle (%1$s to zoom, %2$s to shoot)",
        "with": [{"keybind": "key.use"}, {"keybind": "key.swapOffhand"}],
        "color": "gray",
        "italic": true
    },
    attributes={'damage': {'base': 50, 'uniform': true}, 'attackDelay': 1.5, 'clip': 15, 'ammo': 0},
    controls={'main_fire': true, 'alt_fire': true, 'reload': 0}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SNIPER, slot=1, name='SMG', spread=[25, 60],
    attributes={'damage': {'base': 8}, 'attackDelay': 0.105, 'reloadDelay': [1.1, 1.1], 'clip': 25, 'ammo': 75, 'spreadRecovery': 25},
    controls={'reload': 3}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SNIPER, slot=2, name='Kukri',
    attributes={'damage': {'base': 65}, 'attackDelay': 0.8, 'range': 3.2, 'isMelee': true}
)
`, jmc=true);


class Class.Sniper {
    new advancement(scope) {
        "criteria": {
            "requirement": {
                "trigger": "minecraft:using_item",
                "conditions": {
                    "item": {"items": ["minecraft:spyglass"]}
                }
            }
        },
        "rewards": {
            "function": "tf2:class/sniper/scope"
        }
    }
    new predicate(holding_scope) {
        "condition": "minecraft:all_of",
        "terms": [{
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "offhand": {
                        "items": ["minecraft:crossbow"]
                    }
                }
            }
        }]
    }

    function give() {
        tf2.class:@s = Class.SNIPER;
        tf2.max_health:@s = tf2.health:@s = 125;
        attribute @s minecraft:movement_speed base set BASE_SPEED;

        clear @s;
        loot replace entity @s hotbar.0 loot tf2:class/sniper/sniper_rifle;
        loot replace entity @s hotbar.1 loot tf2:class/sniper/smg;
        loot replace entity @s hotbar.2 loot tf2:class/sniper/kukri;
        loot replace entity @s armor.legs loot tf2:class/sniper/leg_model;
        loot replace entity @s armor.chest loot tf2:class/sniper/chest_model;

        lookup::inventory = @s::Inventory;
        tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.clip;
        tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.ammo;
    }
    function tick() {
        tf2.grace_period:@s[tag=!tf2.scoped] ++;
        tf2.time_scoped:@s[scores={tf2.grace_period=10..}] = 0;
        tag @s[tag=tf2.scoped] remove tf2.scoped;

        Weapons.get_ammo();
        HUD.actionbar();
        Weapons.set_ammo();

        if (entity @s[scores={tf2.time_scoped=1..}]) {
            Class.Sniper.zoom_meter();
        }

        Class.Sniper.inventory_lock();
    }
    function inventory_lock() {
        item replace entity @s armor.chest with air;

        loot replace entity @s hotbar.0 loot tf2:class/sniper/sniper_rifle;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SNIPER * 10 + 0)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SNIPER * 10 + 0)}];
        if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/sniper/sniper_rifle;

        loot replace entity @s hotbar.1 loot tf2:class/sniper/smg;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SNIPER * 10 + 1)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SNIPER * 10 + 1)}];
        if ($_count_ != 1) loot replace entity @s hotbar.1 loot tf2:class/sniper/smg;

        loot replace entity @s hotbar.2 loot tf2:class/sniper/kukri;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SNIPER * 10 + 2)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SNIPER * 10 + 2)}];
        if ($_count_ != 1) loot replace entity @s hotbar.2 loot tf2:class/sniper/kukri;

        loot replace entity @s armor.legs loot tf2:class/sniper/leg_model;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) loot replace entity @s armor.legs loot tf2:class/sniper/leg_model;

        loot replace entity @s armor.chest loot tf2:class/sniper/chest_model;
        $_count_ = clear @s iron_chestplate 0;
        if ($_count_ != 1) clear @s iron_chestplate;
        if ($_count_ != 1) loot replace entity @s armor.chest loot tf2:class/sniper/chest_model;

        loot replace entity @s armor.head loot tf2:class/sniper/head;
        $_count_ = clear @s white_dye[item_model="tf2:misc/head"] 0;
        if ($_count_ != 1) clear @s white_dye[item_model="tf2:misc/head"];
        if ($_count_ != 1) loot replace entity @s armor.head loot tf2:class/sniper/head;
    }
    function scope() {
        tf2.time_scoped:@s += 1;
        tf2.grace_period:@s = 0;
        tag @s add tf2.scoped;
        execute at @s run function retina:traverse/setup;
        execute summon marker run {
            @s::Pos = retina:output::ContactCoordinates;
            tag @s add tf2.temp;
        }
        tag @s add tf2.self;
        execute at @e[type=marker, tag=tf2.temp] run {
            if (entity @s[scores={tf2.team=1}]) {
                particle dust{color: [1.0, 0.2, 0.0], scale: 0.9} ^ ^ ^ 0 0 0 0 2 force @a[tag=!tf2.self,tag=!retina.target];
                if (entity @s[distance=  ..02]) particle dust{color: [1.0, 0.2, 0.0], scale: 0.10} ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=02..05]) particle dust{color: [1.0, 0.2, 0.0], scale: 0.25} ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=05..50]) particle dust{color: [1.0, 0.2, 0.0], scale: 0.55} ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=50..  ]) particle dust{color: [1.0, 0.2, 0.0], scale: 0.90} ^ ^ ^ 0 0 0 0 2 force @s;
                particle dust{color: [1.0, 0.2, 0.0], scale: 0.3} ^ ^ ^ 0 0 0 0 2 force @a[tag=retina.target];
            }
            if (entity @s[scores={tf2.team=2}]) {
                particle dust{color: [0.0, 0.4, 1.0], scale: 0.9} ^ ^ ^ 0 0 0 0 2 force @a[tag=!tf2.self,tag=!retina.target];
                if (entity @s[distance=  ..02]) particle dust{color: [0.0, 0.4, 1.0], scale: 0.10} ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=02..05]) particle dust{color: [0.0, 0.4, 1.0], scale: 0.25} ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=05..50]) particle dust{color: [0.0, 0.4, 1.0], scale: 0.55} ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=50..  ]) particle dust{color: [0.0, 0.4, 1.0], scale: 0.90} ^ ^ ^ 0 0 0 0 2 force @s;
                particle dust{color: [0.0, 0.4, 1.0], scale: 0.3} ^ ^ ^ 0 0 0 0 2 force @a[tag=retina.target];
            }
        }
        tag @s remove tf2.self;
        kill @e[type=marker, tag=tf2.temp];
        JMC.put("advancement revoke @s only tf2:class/sniper/scope");
    }
    @lazy
    function damage_scale() {
        $_multiplier_ = tf2.time_scoped:@a[tag=retina.executing, limit=1];
        $_multiplier_ -= 26;
        $_multiplier_ *= 5;
        $_multiplier_ += 100;

        $_multiplier_ > 100;
        $_multiplier_ < 300;

        if ($_hitHead_) {
            $_multiplier_ *= 3;
        }
    }
    function zoom_meter() {
        $bars = tf2.time_scoped:@s;
        $bars *= 10;
        $bars /= 66;
        $bars += 3;
        $bars < 13;
        $bars > 3;
        title @s times 0 4 2;

        execute positioned ~-3 ~-1 ~-3 
                unless entity @e[type=item_display,tag=tf2.control_point,dx=5,dy=1,dz=5]
                run Text.title(@s, "");
        Text.title(@s[tag=!tf2.can_cap], "");

        switch ($bars) {
            case  3: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abc&<dark_gray,font(zoom_meter)>defghijklm");
            case  4: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcd&<dark_gray,font(zoom_meter)>efghijklm");
            case  5: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcde&<dark_gray,font(zoom_meter)>fghijklm");
            case  6: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdef&<dark_gray,font(zoom_meter)>ghijklm");
            case  7: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefg&<dark_gray,font(zoom_meter)>hijklm");
            case  8: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefgh&<dark_gray,font(zoom_meter)>ijklm");
            case  9: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghi&<dark_gray,font(zoom_meter)>jklm");
            case 10: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghij&<dark_gray,font(zoom_meter)>klm");
            case 11: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghijk&<dark_gray,font(zoom_meter)>lm");
            case 12: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghijkl&<dark_gray,font(zoom_meter)>m");
            case 13: Text.subtitle(@s, "&<gray,font(zoom_meter)>_:abcdefghijklm%");
        }
    }
}