new trim_pattern(demoman) {
    "asset_id": "tf2:demoman",
    "description": {
        "translate": "trim_pattern.tf2.demoman"
    },
    "template_item": "minecraft:stick"
}
generate_body_model(demoman);

JMC.python(`
make_weapon(
    Class.DEMOMAN, slot=0, 
    name='Grenade Launcher',
    display_name="Grenade Launcher (WIP)",
    attributes={'damage': {'base': 100, 'uniform': true, 'indirect': 60}, 'attackDelay': 0.6, 'reloadDelay': [1.24, 0.6], 'clip': 4, 'ammo': 16, 'isProjectile': true},
    projectile={
        'model': 'grenade',
        'spawn': [0, 0, 0], 
        'explosion': {'radius': 146, 'selfDamage': 38}, 
        'speed': 1216,
        'forces': {'gravity': 0.08, 'drag': 0.98, 'collision_friction': 0.95},
        'hitbox': 4,
        'block_collision': {'mode': Collision.BOUNCE, 'elasticity': 0.6},
        'entity_collision': {'mode': Collision.BOUNCE, 'impact_if_first': true, 'elasticity': 0.3},
        'rotation': {'mode': Rotation.PHYSICAL, 'initial': 1200, 'drag': 0.999, 'collision_friction': 0.800},
        'lifetime': 2.3, 'explode_after_lifetime': true
    },
    controls={'alt_fire': True},
	team_specific=False
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.DEMOMAN, slot=1, 
    name='Stickybomb Launcher',
    base_item="tf2:bow_base",
    display_name="Stickybomb Launcher (WIP)",
    attributes={'damage': {'base': 120, 'maxRamp': 1.2, 'uniform': {'timer': 2.0}}, 'attackDelay': 0.6, 'reloadDelay': [1.09, 0.67], 'clip': 8, 'ammo': 24, 'isProjectile': true},
    projectile={
        'model': 'stickybomb',
        'spawn': [0, 0, 0], 
        'explosion': {'radius': 146, 'selfDamage': 45}, 
        'speed': 925,
        'deviation': {'min': 0, 'max': 125}, 
        'forces': {'gravity': 0.08, 'drag': 0.98, 'collision_friction': 0.95},
        'hitbox': 4,
        'block_collision': {'mode': Collision.STICK},
        'entity_collision': {'mode': Collision.BOUNCE, 'elasticity': 0.1},
        'rotation': {'mode': Rotation.CHASE},
        'lifetime': 2147483647,
        'arm_time': 0.7,
        'explode_alt_fire': 8
    },
    controls={'alt_fire': True},
    team_specific=False
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.DEMOMAN, slot=2, 
    name='Bottle',
    attributes={'damage': {'base': 65}, 'attackDelay': 0.8, 'range': 3.2, 'isMelee': true},
    controls={'alt_fire': True}
)
`, jmc=true);


class Class.Demoman {
    function give() {
        tf2.class:@s = Class.DEMOMAN;
        tf2.max_health:@s = tf2.health:@s = 175;
        attribute @s minecraft:movement_speed base set EVAL(BASE_SPEED * 0.93);

        clear @s;
        loot replace entity @s hotbar.0 loot tf2:class/demoman/grenade_launcher;
        loot replace entity @s hotbar.1 loot tf2:class/demoman/stickybomb_launcher;
        loot replace entity @s hotbar.2 loot tf2:class/demoman/bottle;
        loot replace entity @s armor.legs loot tf2:class/demoman/leg_model;
        loot replace entity @s armor.chest loot tf2:class/demoman/chest_model;

        lookup::inventory = @s::Inventory;
        tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.clip;
        tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.ammo;
    }
    @lazy
    function tick() {
        Weapons.get_ammo();
        HUD.actionbar();
        Weapons.set_ammo();

        this.inventory_lock();

        this.detonate_oldest_stickybomb();
    }
    function inventory_lock() {
        item replace entity @s weapon.offhand with air;
        loot replace entity @s hotbar.0 loot tf2:class/demoman/grenade_launcher;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.DEMOMAN * 10 + 0)}] 0;
        if ($_count_ != 1) expand {
            clear @s *[custom_data~{key: EVAL(Class.DEMOMAN * 10 + 0)}];
            loot replace entity @s hotbar.0 loot tf2:class/demoman/grenade_launcher;
        }

        loot replace entity @s hotbar.1 loot tf2:class/demoman/stickybomb_launcher;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.DEMOMAN * 10 + 1)}] 0;
        if ($_count_ != 1) expand {
            clear @s *[custom_data~{key: EVAL(Class.DEMOMAN * 10 + 1)}];
            loot replace entity @s hotbar.1 loot tf2:class/demoman/stickybomb_launcher;
        }
        loot replace entity @s hotbar.2 loot tf2:class/demoman/bottle;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.DEMOMAN * 10 + 2)}] 0;
        if ($_count_ != 1) expand {
            clear @s *[custom_data~{key: EVAL(Class.DEMOMAN * 10 + 2)}];
            loot replace entity @s hotbar.2 loot tf2:class/demoman/bottle;
        }

        if (tf2.current_slot:@s[predicate=tf2:ammo_in_clip] == 1) {
            item replace entity @s inventory.1 with arrow;
            $_count_ = clear @s arrow 0;
            if ($_count_ != 1) expand {
                clear @s arrow;
                item replace entity @s inventory.1 with arrow;
            }
        }

        loot replace entity @s armor.legs loot tf2:class/demoman/leg_model;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) expand {
            clear @s iron_leggings;
            loot replace entity @s armor.legs loot tf2:class/demoman/leg_model;
        }
        loot replace entity @s armor.chest loot tf2:class/demoman/chest_model;
        $_count_ = clear @s iron_chestplate 0;
        if ($_count_ != 1) expand {
            clear @s iron_chestplate;
            loot replace entity @s armor.chest loot tf2:class/demoman/chest_model;
        }
        loot replace entity @s armor.head loot tf2:class/demoman/head;
        $_count_ = clear @s white_dye[item_model="tf2:misc/head"] 0;
        if ($_count_ != 1) expand {
            clear @s white_dye[item_model="tf2:misc/head"];
            loot replace entity @s armor.head loot tf2:class/demoman/head;
        }       
    }
    function erase_all_stickybombs() {
        tf2.player.id:$search = tf2.player.id:@s;
        execute as @e[tag=tf2.projectile]
                if score @s tf2.player.id = $search tf2.player.id
                if data entity @s item.components.minecraft:custom_data.projectile.explode_alt_fire
                at @s run Projectile.fizzle();
    }
    function detonate_all_stickybombs() {
        tf2.player.id:$search = tf2.player.id:@s;
        execute as @e[tag=tf2.projectile]
                if score @s tf2.player.id = $search tf2.player.id
                if data entity @s item.components.minecraft:custom_data.projectile.explode_alt_fire
                at @s run Projectile.detonate_if_armed();
    }
    function detonate_oldest_stickybomb() {
        tag @e remove tf2.my_stickybomb;
        tf2.player.id:$search = tf2.player.id:@s;
        execute as @e[tag=tf2.projectile]
                if score @s tf2.player.id = $search tf2.player.id
                if data entity @s item.components.minecraft:custom_data.projectile.explode_alt_fire
                run tag @s add tf2.my_stickybomb;

        $stickybomb_count = execute if entity @e[tag=tf2.my_stickybomb];
        $stickybomb_max = @s::Inventory[{Slot: 1b}].components.minecraft:custom_data.projectile.explode_alt_fire;

        if ($stickybomb_count <= $stickybomb_max) {
            return fail;
        }
        
        tf2.age:$oldest = 0;
        tf2.age:$oldest > tf2.age:@e[tag=tf2.my_stickybomb];
        execute as @e[tag=tf2.my_stickybomb] 
                if score @s tf2.age = $oldest tf2.age
                at @s run Projectile.detonate_if_armed();

        tag @e remove tf2.my_stickybomb;
    }
    function unstick_stickybomb() {
        tag @s add tf2.self;
        execute summon marker run {
            rotate @s facing entity @n[tag=tf2.self] feet;
            $input_pitch = @s::Rotation[1] * 10;
            $input_yaw = @s::Rotation[0] * 10;
            Math.gimbal_to_vector();
            kill @s;
        }
        tag @s remove tf2.self;
        // printf("output vector = &<$output_vector_x>, &<$output_vector_y>, &<$output_vector_z>");
        tf2.mot_x:@s := $output_vector_x + -100 * tf2.collision_x:@s;
        tf2.mot_y:@s := $output_vector_y + -100 * tf2.collision_y:@s;
        tf2.mot_z:@s := $output_vector_z + -100 * tf2.collision_z:@s;
        tag @s remove tf2.stuck;
    }
}