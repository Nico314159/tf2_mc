new trim_pattern(spy) {
    "asset_id": "tf2:spy",
    "description": {
        "translate": "trim_pattern.tf2.spy"
    },
    "template_item": "minecraft:stick"
}
generate_body_model(spy);


JMC.python(
    `
    import json
    classes = ('Sniper', 'Scout', 'Heavy', 'Soldier', 'Spy', 'Pyro')
    ids = (2, 3, 6, 4, 1, 7)

    
    for (class_name, id) in zip(classes, ids):

        name = {
            "function": "set_name",
            "name": [
                {
                    "text": f"Disguise as {class_name} ", 
                    "italic": False,
                    "font": "minecraft:default"
                },
                {
                    "text": str(6543 if class_name == 'Spy' else 71),
                    "font": "tf2:square"
                },
                {
                    "translate": "tf2.menu_head",
                    "fallback": "('%s' = ᴛᴏɢɢʟᴇ ᴛᴇᴀᴍ, '%s' = ᴄᴀɴᴄᴇʟ)",
                    "with": [{"keybind": "key.drop"}, {"keybind": "key.swapOffhand"}],
                    "color": "gray", 
                    "font": "tf2:line2",
                    "italic": True
                },
                {
                    "text": str(54 if class_name == 'Spy' else 531),
                    "font": "tf2:square"
                },
            ]
        }

        model = [{
            "function": "set_custom_model_data",
            "value": id * 10 + n,
            "conditions": [{
                "condition": "entity_scores",
                "entity": "this", "scores": {"tf2.disguise.team": n}
            }]
        } for n in {1, 2}]

        special_tag = { "function": "set_custom_data", "tag": "{disguise: true}" }

        loot = {
            "pools": [{
                "rolls": 1,
                "entries": [
                    {
                        "type": "item",
                        "name": "white_dye",
                        "functions": [name, *model, special_tag]
                    }
                ]
            }]
        }

        emit(f'new loot_table(class.spy.disguise.{class_name.lower()}) {json.dumps(loot)}')
    `,
    jmc=true
);

JMC.python(`
make_weapon(
    Class.SPY, slot=0, name='Revolver',
    attributes={'damage': {'base': 40, 'maxRamp': 1.5}, 'attackDelay': 0.5, 'reloadDelay': [1.133, 1.133], 'clip': 6, 'ammo': 24, 'spreadRecovery': 25},
    controls={'reload': 3}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SPY, slot=1, name='Sapper',
    base_item='minecraft:white_dye'
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SPY, slot=2, 
    name='Butterfly Knife',
    attributes={'damage': {'base': 40}, 'attackDelay': 0.8, 'range': 3.2, 'isMelee': true, 'canBackstab': false}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SPY, slot=3, 
    name='Disguise Kit',
    extra=[
        {"function": "set_custom_data", "tag": "{disguise: true}"}
    ]
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SPY, slot=4, 
    name='Invis Watch',
    display_name={
        "translate": "tf2.invis_watch",
        "fallback": "Invis Watch (%s to cloak)",
        "with": [{"keybind": "key.swapOffhand"}],
        "color": "gray",
        "italic": true
    },
    attributes={'cloak_recharge': 30.0},
    base_item='minecraft:white_dye',
    extra=[
        { 
            "function": "minecraft:set_custom_data", 
            "tag": "{cloak: 'cloak'}" 
        },
        *meter(seconds=30.0, score='tf2.cloak')
    ]
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SPY, slot=4, 
    name='invis_watch_gui_only',
    display_name=False,
    base_item='tf2:class/spy/invis_watch',
    cmd_bump=1,
    extra=[{ 
        "function": "minecraft:set_custom_data", 
        "tag": "{cloak: 'uncloak'}" 
    }]
)
`, jmc=true);


class Class.Spy {
    new item_modifier(raise_knife) [
        {
            "function": "minecraft:set_custom_data",
            "tag": "{attributes: {canBackstab: true}}"
        },
        {
            "function": "minecraft:set_custom_model_data",
            "value": {
                "type": "minecraft:score",
                "target": {
                    "type": "minecraft:fixed",
                    "name": "$CMD"
                },
                "score": "tf2.var",
                "scale": 1
            }
        }
    ];

    function give() {
        tf2.class:@s = Class.SPY;
        tf2.max_health:@s = tf2.health:@s = 125;
        attribute @s minecraft:movement_speed base set BASE_SPEED;

        if (!entity @s[tag=tf2.disguised, tag=!tf2.dead]) {
            clear @s;
        }
        loot replace entity @s hotbar.0 loot tf2:class/spy/revolver;
        loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;
        loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        loot replace entity @s hotbar.3 loot tf2:class/spy/disguise_kit;
        loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        if (!entity @s[tag=tf2.disguised, tag=!tf2.dead]) {
            loot replace entity @s armor.legs loot tf2:class/spy/leg_model;
        }
        
        lookup::inventory = @s::Inventory;
        tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = 0;
        tf2.cloak:@s = lookup::inventory[{Slot:-106b}].components.minecraft:custom_data.attributes.cloak_recharge * 20;

        if (entity @s[tag=!tf2.dead]) {
            return 1;
        }
        tf2.is_invisible:@s = tf2.menu_ticks:@s = 0;
        tag @s remove tf2.disguised;
        tag @s remove tf2.in_disguise_menu;
        tf2.disguise.team:@s = tf2.team:@s;
        this.disguise_menu.toggle_team();
    }

    function cloak() {
        if (tf2.cloak:@s <= 0) {
            return run swap_hands();
        }
        tf2.is_invisible:@s = 1;
        effect give @s[scores={tf2.is_invisible=1}] invisibility infinite 0 true;
    }
    function uncloak() {
        tf2.is_invisible:@s = 0;
        effect clear @s[scores={tf2.is_invisible=0}] invisibility;
    }

    function tick() {
        Weapons.get_ammo();
        HUD.actionbar();
        Weapons.set_ammo();

        if (entity @s[tag=tf2.disguised]) {
            this.nametag.follow();
        }

        // Toggle cloak by switching hands
        if (items entity @s[scores={tf2.is_invisible=0}] weapon.mainhand white_dye[custom_data~{cloak: 'cloak'}]) {
            this.cloak();
        }
        if (items entity @s[scores={tf2.is_invisible=1}] weapon.mainhand white_dye[custom_data~{cloak: 'uncloak'}]) {
            this.uncloak();
        }

        // Cloak drain and replenishment over time
        tf2.cloak:@s[scores={tf2.is_invisible=0, tf2.cloak=..599}]++;
        tf2.cloak:@s[scores={tf2.is_invisible=1}] -= 3;
        if (tf2.cloak:@s[scores={tf2.is_invisible=1}] <= 0) {
            this.uncloak();
        }

        if (items entity @s weapon.offhand crossbow[charged_projectiles=[], custom_data~{should_detect_click: true}]) {
            this.disguise_menu.detect_input();
        }

        this.disguise_menu.count_ticks();

        if (entity @s[tag=tf2.in_disguise_menu]) {
            return run this.disguise_menu.run();
        }
        if (entity @s[tag=tf2.disguised, scores={tf2.is_invisible=0}]) {
            return run this.fake_inventory_lock();
        }
        this.inventory_lock();
    }

    function inventory_lock() {
        if (tf2.is_invisible:@s) {
            return run this.disable_attacking();
        }

        attribute @s[tag=!tf2.disguised] minecraft:movement_speed modifier remove tf2:match_disguise_speed;

        item replace entity @s armor.chest with air;

        loot replace entity @s hotbar.0 loot tf2:class/spy/revolver;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 0)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 0)}];
        if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/spy/revolver;

        loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 1)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 1)}];
        if ($_count_ != 1) loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;

        loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 2)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 2)}];
        if ($_count_ != 1) loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        
        if (tf2.current_slot:@s == 2) {
            this.determine_backstab();
        }

        loot replace entity @s hotbar.3 loot tf2:class/spy/disguise_kit;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 3)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 3)}];
        if ($_count_ != 1) loot replace entity @s hotbar.3 loot tf2:class/spy/disguise_kit;

        loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 4)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SPY * 10 + 4)}];
        if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;

        clear @s *[minecraft:custom_data~{cloak: 'uncloak'}];

        loot replace entity @s armor.legs loot tf2:class/spy/leg_model;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) loot replace entity @s armor.legs loot tf2:class/spy/leg_model;

        loot replace entity @s armor.chest loot tf2:class/spy/chest_model;
        $_count_ = clear @s iron_chestplate 0;
        if ($_count_ != 1) clear @s iron_chestplate;
        if ($_count_ != 1) loot replace entity @s armor.chest loot tf2:class/spy/chest_model;

        tf2.model_number:@s = EVAL (Class.SPY * 10);
        tf2.model_number:@s += tf2.team:@s;

        loot replace entity @s armor.head loot tf2:class/spy/head;
        $_count_ = clear @s white_dye 0;
        if ($_count_ != 1) clear @s white_dye;
        if ($_count_ != 1) loot replace entity @s armor.head loot tf2:class/spy/head;
    }
    function disable_attacking() {
        clear @s *[!custom_data~{cloak: 'uncloak'}];
        loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch_gui_only;
        $_count_ = clear @s *[custom_data~{cloak: 'uncloak'}] 0;
        if ($_count_ != 1) expand {
            clear @s *[custom_data~{cloak: 'uncloak'}];
            loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch_gui_only;
        }
    }
    function fake_inventory_lock() {
        JMC.python(`
        emit('switch (tf2.disguise.class:@s) {')
        for c in classes:
            emit(f'case Class.{c.upper()}: vars::pattern = "{c.lower()}";')
        emit('}')
        `, jmc=true);

        if (tf2.disguise.team:@s == 1) {vars::material = "red";}
        if (tf2.disguise.team:@s == 2) {vars::material = "blu";}

        if (items entity @s player.cursor *) {
            item replace entity @s player.cursor with air;
        }
        this.inventory_lock();
        this.fake_primary();
        this.fake_secondary();
        this.fake_melee();

        this.fake_leggings() with vars::;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) this.fake_leggings() with vars::;

        // loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        // $_count_ = clear @s white_dye[custom_model_data=] 0;
        // if ($_count_ != 1) clear @s white_dye[custom_model_data=];
        // if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        item modify entity @s weapon.offhand {
            "function": "minecraft:set_custom_model_data", "value": EVAL(EVAL(Class.SPY * 5 + 4) * 10 * 5 * 3 + 1)
        };

        tf2.model_number:@s = tf2.disguise.class:@s;
        tf2.model_number:@s *= 10;
        tf2.model_number:@s += tf2.disguise.team:@s;

        loot replace entity @s armor.head loot tf2:class/spy/head;
        $_count_ = clear @s white_dye 0;
        if ($_count_ != 1) clear @s white_dye;
        if ($_count_ != 1) loot replace entity @s armor.head loot tf2:class/spy/head;

        this.true_team_trail();
    }
    function fake_primary() {
        // $merge_CMD = @s::Inventory[{Slot:0b}].components.minecraft:custom_model_data;
        // $world_CMD = tf2.disguise.class:@s;
        
        // JMC.python(`
        // emit(f"$world_CMD *= {SLOTS};")
        // emit(f"$world_CMD += 0;")
        // emit(f"$world_CMD *= {SERIAL_MAX};")
        // # TODO
        // emit(f"$world_CMD *= 3;")
        // emit(f"$world_CMD += tf2.disguise.team:@s;")
        // emit(f"$world_CMD *= {VARIATIONS};")
                
        // emit(f"$merge_CMD *= {MAX_CMD};")
        // emit(f"$merge_CMD += $world_CMD;")
        // `, jmc=true);

        // item modify entity @s hotbar.0 {
        //     "function": "minecraft:set_custom_model_data",
        //     "value": {
        //         "type": "minecraft:score",
        //         "target": {
        //             "type": "minecraft:fixed",
        //             "name": "$merge_CMD"
        //         },
        //         "score": "tf2.var"
        //     }
        // };

        // JMC.python(`
        // emit(f"$merge_CMD += {3 * SERIAL_MAX * 3 * VARIATIONS * MAX_CMD};")
        // `, jmc=true);
        // item modify entity @s hotbar.3 {
        //     "function": "minecraft:set_custom_model_data",
        //     "value": {
        //         "type": "minecraft:score",
        //         "target": {
        //             "type": "minecraft:fixed",
        //             "name": "$merge_CMD"
        //         },
        //         "score": "tf2.var"
        //     }
        // };
    }
    function fake_secondary() {
        // // loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;
        // $merge_CMD = @s::Inventory[{Slot:1b}].components.minecraft:custom_model_data;
        // $world_CMD = tf2.disguise.class:@s;
        
        // JMC.python(`
        // emit(f"$world_CMD *= {SLOTS};")
        // emit(f"$world_CMD += 1;")
        // emit(f"$world_CMD *= {SERIAL_MAX};")
        // # TODO
        // emit(f"$world_CMD *= 3;")
        // emit(f"$world_CMD += tf2.disguise.team:@s;")
        // emit(f"$world_CMD *= {VARIATIONS};")
                
        // emit(f"$merge_CMD *= {MAX_CMD};")
        // emit(f"$merge_CMD += $world_CMD;")
        // `, jmc=true);

        // item modify entity @s hotbar.1 {
        //     "function": "minecraft:set_custom_model_data",
        //     "value": {
        //         "type": "minecraft:score",
        //         "target": {
        //             "type": "minecraft:fixed",
        //             "name": "$merge_CMD"
        //         },
        //         "score": "tf2.var"
        //     }
        // };
    }
    function fake_melee() {
        // // loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        // $merge_CMD = @s::Inventory[{Slot:2b}].components.minecraft:custom_model_data;
        // $world_CMD = tf2.disguise.class:@s;
        
        // JMC.python(`
        // emit(f"$world_CMD *= {SLOTS};")
        // emit(f"$world_CMD += 2;")
        // emit(f"$world_CMD *= {SERIAL_MAX};")
        // # TODO
        // emit(f"$world_CMD *= 3;")
        // emit(f"$world_CMD += tf2.disguise.team:@s;")
        // emit(f"$world_CMD *= {VARIATIONS};")
                
        // emit(f"$merge_CMD *= {MAX_CMD};")
        // emit(f"$merge_CMD += $world_CMD;")
        // `, jmc=true);

        // item modify entity @s hotbar.2 {
        //     "function": "minecraft:set_custom_model_data",
        //     "value": {
        //         "type": "minecraft:score",
        //         "target": {
        //             "type": "minecraft:fixed",
        //             "name": "$merge_CMD"
        //         },
        //         "score": "tf2.var"
        //     }
        // };
    }
    function fake_leggings() {
        $ loot replace entity @s armor.legs loot {
            "pools": [{
                "rolls": 1,
                "entries": [{"type": "minecraft:item", "name": "minecraft:iron_leggings"}],
                "functions": [{
                    "function": "minecraft:set_components",
                    "components": {
                        "minecraft:enchantments": {"minecraft:binding_curse": 1},
                        "minecraft:enchantment_glint_override": false,
                        "minecraft:trim": {"material": "tf2:$(material)", "pattern": "tf2:$(pattern)"}
                    }
                }]
            }]
        };   
    }
    class nametag {
        function create() {
            team leave @s;
            setblock 0 0 0 decorated_pot;
            loot replace block 0 0 0 contents loot {
                pools: [{
                    rolls: 1, 
                    entries: [{
                        type: "item", name: "stone",
                        functions: [
                            {function: "set_name", entity: "this", name: {selector: "@s"}}
                        ]
                    }]
                }]
            };

            $disguise_team = tf2.disguise.team:@s;
            Hardcode.repeat("_i_", () => {
                $uuid._i_ = tf2.uuid._i_:@s;
            }, 0, 4);
            execute summon turtle run this.set_data();

            team join RED @s[scores={tf2.team=1}];
            team join BLU @s[scores={tf2.team=2}];
        }
        // @private
        function set_data() {
            @s::CustomName = [0,0,0]::item.components.minecraft:custom_name;
            @s:: += {CustomNameVisible: true, Age: -2147483647, NoGravity: true, NoAI: true};
            attribute @s minecraft:scale base set 1.75;

            if ($disguise_team == 1) { team join RED @s; }
            if ($disguise_team == 2) { team join BLU @s; }

            Hardcode.repeat("_i_", () => {
                tf2.uuid._i_:@s = $uuid._i_;
            }, 0, 4);

            tag @s add retina.ignore;
        }
        @lazy 
        function linked_tp(x, y, z) {
            Hardcode.repeat("_i_", () => {
                $uuid._i_ = tf2.uuid._i_:@s;
            }, 0, 4);

            execute positioned as @s 
                    as @e[type=turtle]
                    if score @s tf2.uuid.0 = $uuid.0 tf2.var
                    if score @s tf2.uuid.1 = $uuid.1 tf2.var
                    if score @s tf2.uuid.2 = $uuid.2 tf2.var
                    if score @s tf2.uuid.3 = $uuid.3 tf2.var
                    run tp @s $x $y $z;
        }
        function follow() {
            this.linked_tp(~, ~2, ~);
        }
        function delete() {
            this.linked_tp(0, -1000, 0);
        }
    }

    function determine_backstab() {
        function retina:traverse/setup;
        if (!data storage retina:output {Target: "ENTITY"}) {
            return fail;
        }
        if (entity @a[tag=retina.target,gamemode=spectator]) {
            return fail;
        }

        tf2.team:$current = tf2.team:@s;
        execute as @a[tag=retina.target,limit=1]
                if score @s tf2.team = $current tf2.team
                run return fail;

        $enemy_dist = retina:output::Distance * 10;
        $backstab_range = @s::SelectedItem.components."minecraft:custom_data".attributes.range * 50;
        $backstab_range /= 6;
        if ($enemy_dist > $backstab_range) {return fail;}

        lookup::spy_pos = @s::Pos;
        lookup::enemy_pos = @a[tag=retina.target,limit=1]::Pos;

        // (Spy pos to enemy pos) * (Enemy rotation)
        execute at @s summon marker run tag @s add get_pos;
        execute as @e[type=marker, tag=get_pos] expand {
            tp @s ~ ~ ~ facing entity @a[tag=retina.target,limit=1] feet;
            Math.facing_vector();
            kill @s;
        }
        Math.feed_left();
        
        execute as @a[tag=retina.target,limit=1] run Math.facing_vector();
        Math.feed_right();
        Math.dot_product();
        // printf("&<bold>Enemy: &<!bold>[&<$input_vector_2_x>, &<$input_vector_2_y>, &<$input_vector_2_z>]");
        // printf("&<yellow>1st dot product: &<white>&<$dot_product>");
        if ($dot_product < 0) {return fail;}

        // (Spy pos to enemy pos) * (Spy rotation)
        Math.facing_vector();
        Math.feed_right();
        Math.dot_product();
        // printf("&<green>2nd dot product: &<white>&<$dot_product>");
        if ($dot_product < 500) {return fail;}

        // (Enemy rotation) * (Spy rotation)
        execute as @a[tag=retina.target,limit=1] run Math.facing_vector();
        Math.feed_left();
        Math.dot_product();
        // printf("&<blue>3rd dot product: &<white>&<$dot_product>");
        if ($dot_product < -300) {return fail;}

        // $theta_1 = @s::Rotation[0];
        // if ($theta_1 < 0) {$theta_1 += 360;}
        // $theta_2 = @a[tag=retina.target,limit=1]::Rotation[0];
        // if ($theta_2 < 0) {$theta_2 += 360;}
        // $theta_1 -= $theta_2;
        // if ($theta_1 matches 90..270) {return fail;}

        $CMD = @s::SelectedItem.components."minecraft:custom_model_data" * 0.1;
        $CMD *= 10;
        $CMD ++;
        item modify entity @s weapon.mainhand tf2:class/spy/raise_knife;
    }

    function true_team_trail() {
        tf2.team:$current = tf2.team:@s;
        execute as @a if score @s tf2.team = $current tf2.team run tag @s add teammate;
        if (tf2.team:@s == 1) expand {
            particle minecraft:block{block_state:red_terracotta} ~ ~ ~ 0.05 0.00 0.05 0 5 normal @a[tag=teammate, distance=0.01..];
            particle minecraft:falling_dust{block_state:red_stained_glass} ~ ~ ~ 0.2 0.00 0.2 0 5 normal @a[tag=teammate, distance=0.01..];
        }
        if (tf2.team:@s == 2) expand {
            particle minecraft:block{block_state:light_blue_concrete} ~ ~ ~ 0.05 0.00 0.05 0 5 normal @a[tag=teammate, distance=0.01..];
            particle minecraft:falling_dust{block_state:blue_stained_glass} ~ ~ ~ 0.2 0.00 0.2 0 5 normal @a[tag=teammate, distance=0.01..];
        }
        tag @a remove teammate;
    }

    function light_smoke() {
        particle minecraft:white_smoke ~ ~0.75 ~ 0.2 0.6 0.2 0 25 normal @a[tag=!self];
        particle minecraft:white_smoke ~ ~1.25 ~ 0.2 0 0.2 0 25 normal @a[tag=!self];
    }
    function thick_smoke() {
        particle minecraft:poof ~ ~ ~ 0.07 0.7 0.07 0 200 normal @a[tag=!self];
        if (tf2.team:@s == 1) expand {
            particle minecraft:item{item: "red_stained_glass"} ~ ~1.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
            particle minecraft:item{item: "red_stained_glass"} ~ ~0.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
        }
        if (tf2.team:@s == 2) expand {
            particle minecraft:item{item:"blue_stained_glass"} ~ ~1.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
            particle minecraft:item{item:"blue_stained_glass"} ~ ~0.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
        }
    }
    function title_image() {
        Text.title(@s, "&<font(disguise)>S");
        title @s times 5t 8t 5t;
    }

    class disguise_menu {
        function run() {
            item replace entity @s armor.chest with air;

            loot replace entity @s weapon.offhand loot tf2:class/spy/disguise_kit;
            $_count_ = clear @s crossbow[custom_data~{disguise: true}] 0;
            if ($_count_ != 1) expand {
                clear @s crossbow[custom_data~{disguise: true}];
                loot replace entity @s weapon.offhand loot tf2:class/spy/disguise_kit;
            }
            item modify entity @s weapon.offhand tf2:load_crossbow;

            item modify entity @s weapon.offhand {
                "function": "minecraft:set_custom_model_data",
                "value": {
                    "type": "minecraft:score",
                    "target": "this",
                    "score": "tf2.disguise.primary_CMD"
                }
            };

            this.give_heads();
        }
        function give_heads() {
            JMC.python(`
                for (slot, class_name) in enumerate(classes):
                    emit(f"loot replace entity @s hotbar.{slot} loot tf2:class/spy/disguise/{class_name.lower()}");
            `, jmc=false);
            $_count_ = clear @s white_dye[custom_data~{disguise: true}] 0;

            JMC.python("emit(f'if ($_count_ == {len(classes)}) return true;')", jmc=true);

            clear @s white_dye[custom_data~{disguise: true}];
            this.give_heads();
        }
        function toggle_team() {
            // @within Weapons.reload
            tf2.disguise.team:@s %= 2;
            tf2.disguise.team:@s ++;
        }
        function count_ticks() {
            if (entity @s[tag=tf2.in_disguise_menu]) return run {
                if (items entity @s weapon.mainhand crossbow[custom_data~{disguise: true}]) {
                    tag @s remove tf2.in_disguise_menu;
                } 
            }

            if (!items entity @s weapon.mainhand crossbow[custom_data~{disguise: true}]) {
                return run tf2.menu_ticks:@s = 0;
            }
            
            tf2.menu_ticks:@s++;
            if (tf2.menu_ticks:@s < 10) {
                return 0;
            }
            tf2.disguise.primary_CMD:@s = @s::Inventory[{Slot:3b}].components.minecraft:custom_model_data;
            tag @s add tf2.in_disguise_menu;
            tf2.menu_ticks:@s = -10;
        }
        function detect_input() {
            kill @e[type=arrow,tag=!tf2.projectile];

            if (items entity @s weapon.offhand crossbow[custom_data~{disguise: true, key: EVAL(Class.SPY * 10 + 3)}]) {
                Class.Spy.apply_disguise();
            }
        }
    }

    function apply_disguise() {
        tag @s remove tf2.in_disguise_menu;
        $error = false;
        if (tf2.class:@s != Class.SPY) {
            $error = Text.tellraw(@s, "&<yellow, italic>ERROR: You can't use disguises if you're not playing as the Spy.");
        }

        tf2.disguise.team:@s = tf2.disguise.class:@s = @s::SelectedItem.components.minecraft:custom_model_data;
        tf2.disguise.class:@s /= 10;
        tf2.disguise.team:@s %= 10;
        
        if (tf2.disguise.class:@s == Class.SPY && tf2.disguise.team:@s == tf2.team:@s) {
            // Disguising as a friendly Spy simply removes your disguise without an error message;
            $error = true;
        }

        attribute @s minecraft:movement_speed modifier remove tf2:match_disguise_speed;
        if ($error) {
            return run tag @s remove tf2.disguised;
        }

        switch (tf2.disguise.class:@s) { 
            case Class.SOLDIER:
                attribute @s minecraft:movement_speed modifier add tf2:match_disguise_speed -0.15 add_multiplied_base;     
            case Class.DEMOMAN:
                attribute @s minecraft:movement_speed modifier add tf2:match_disguise_speed -0.07 add_multiplied_base;
            case Class.HEAVY:
                attribute @s minecraft:movement_speed modifier add tf2:match_disguise_speed -0.30 add_multiplied_base;
        }

        tag @s add self;

        if (entity @s[tag=!tf2.disguised,scores={tf2.is_invisible=0}]) {
            this.thick_smoke();
        }

        if (entity @s[tag=tf2.disguised,scores={tf2.is_invisible=0}]) {
            this.light_smoke();
        }
        this.title_image();

        execute unless score @s tf2.team = @s tf2.disguise.team
                at @s anchored eyes  
                run this.nametag.create();

        tag @s remove self;
        tag @s add tf2.disguised;
    }
}