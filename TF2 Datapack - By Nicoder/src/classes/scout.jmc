new trim_pattern(scout) {
    "asset_id": "tf2:scout",
    "description": {
        "translate": "trim_pattern.tf2.scout"
    },
    "template_item": "minecraft:stick"
}
generate_body_model(scout);

JMC.python(`
make_weapon(
    Class.SCOUT, slot=0, name='Scattergun', bullets=[3, 3], spread=[100, 250],
    attributes={'damage': {'base': 6, 'maxRamp': 1.75}, 'attackDelay': 0.625, 'reloadDelay': [0.7, 0.5], 'clip': 6, 'ammo': 32}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SCOUT, slot=1, name='Pistol', spread=[40, 85],
    attributes={'damage': {'base': 15}, 'attackDelay': 0.15, 'reloadDelay': [1.005, 1.005], 'clip': 12, 'ammo': 40, 'spreadRecovery': 25},
    controls={'reload': 3}
)
`, jmc=true);
JMC.python(`
make_weapon(
    Class.SCOUT, slot=1, name='Pistol2', spread=[40, 85],
    attributes={'damage': {'base': 15}, 'attackDelay': 0.15, 'reloadDelay': [1.005, 1.005], 'clip': 12, 'ammo': 40, 'spreadRecovery': 25},
    controls={'reload': 3}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.SCOUT, slot=2, name='Baseball Bat',
    attributes={'damage': {'base': 35}, 'attackDelay': 0.5, 'range': 3.2, 'isMelee': true}
)
`, jmc=true);

class Class.Scout {
    function give() {
        tf2.class:@s = Class.SCOUT;
        tf2.max_health:@s = tf2.health:@s = 125;
        attribute @s minecraft:movement_speed base set EVAL(BASE_SPEED * 4/3);

        clear @s;
        loot replace entity @s hotbar.0 loot tf2:class/scout/scattergun;
        loot replace entity @s hotbar.1 loot tf2:class/scout/pistol;
        loot replace entity @s hotbar.2 loot tf2:class/scout/baseball_bat;
        loot replace entity @s armor.legs loot tf2:class/scout/leg_model;
        loot replace entity @s armor.chest loot tf2:class/scout/chest_model;

        lookup::inventory = @s::Inventory;
        tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.clip;
        tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.ammo;
    }
    @lazy
    function tick() {
        Weapons.get_ammo();
        HUD.actionbar();
        Weapons.set_ammo();

        Hardcode.repeatList('|key|', () => {
            new predicate(input.|key|) {
                "condition": "minecraft:entity_properties",
                "entity": "this",
                "predicate": {
                    "type_specific": {
                        "type": "minecraft:player",
                        "input": {"|key|": true}
                    }
                }
            }
        }, ['jump', 'left', 'right', 'forward', 'backward']);

        tf2.can_double_jump:@s[predicate=tf2:grounded] = 1;
        if (tf2.can_double_jump:@s == 1 && !predicate tf2:input/jump && !predicate tf2:grounded) {
            tf2.can_double_jump:@s = 2;
        }
        if (tf2.can_double_jump:@s == 2 && predicate tf2:input/jump) {
            this.double_jump();
        }

        Class.Scout.inventory_lock();
    }
    function double_jump() {
		player_motion.api.launch:$x = player_motion.api.launch:$z = 0;
        player_motion.api.launch:$y = 5500;

        $input = @s::Rotation[0] * 10;
        Math.sine();
        $sine := ($output * 3) / 2;
        Math.cosine();
        $cosine := ($output * 3) / 2;

		if (predicate tf2:input/left) expand {
            player_motion.api.launch:$x += $cosine;
            player_motion.api.launch:$z += $sine;
        }
        if (predicate tf2:input/right) expand {
            player_motion.api.launch:$x -= $cosine;
            player_motion.api.launch:$z -= $sine;
        }
		if (predicate tf2:input/forward) expand {
            player_motion.api.launch:$x -= $sine;
            player_motion.api.launch:$z += $cosine;
        }
        if (predicate tf2:input/backward) expand {
            player_motion.api.launch:$x += $sine;
            player_motion.api.launch:$z -= $cosine;
        }

        // printf("X: &<player_motion.api.launch:$x>");
        // printf("Y: &<player_motion.api.launch:$y>");
		// printf("Z: &<player_motion.api.launch:$z>");
        // printf("");
		function player_motion:api/launch_xyz;

		tf2.permanent.double_jumps:@s++;
		tf2.can_double_jump:@s = false;
    }
    function inventory_lock() {
        item replace entity @s weapon.offhand with air;
        loot replace entity @s hotbar.0 loot tf2:class/scout/scattergun;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SCOUT * 10 + 0)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SCOUT * 10 + 0)}];
        if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/scout/scattergun;

        loot replace entity @s hotbar.1 loot tf2:class/scout/pistol;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SCOUT * 10 + 1)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SCOUT * 10 + 1)}];
        if ($_count_ != 1) loot replace entity @s hotbar.1 loot tf2:class/scout/pistol;

        loot replace entity @s hotbar.2 loot tf2:class/scout/baseball_bat;
        $_count_ = clear @s *[custom_data~{key: EVAL(Class.SCOUT * 10 + 2)}] 0;
        if ($_count_ != 1) clear @s *[custom_data~{key: EVAL(Class.SCOUT * 10 + 2)}];
        if ($_count_ != 1) loot replace entity @s hotbar.2 loot tf2:class/scout/baseball_bat;

        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) loot replace entity @s armor.legs loot tf2:class/scout/leg_model;

        $_count_ = clear @s iron_chestplate 0;
        if ($_count_ != 1) clear @s iron_chestplate;
        if ($_count_ != 1) loot replace entity @s armor.chest loot tf2:class/scout/chest_model;

        $_count_ = clear @s white_dye[item_model="tf2:misc/head"] 0;
        if ($_count_ != 1) {
            clear @s white_dye[item_model="tf2:misc/head"];
            loot replace entity @s armor.head loot tf2:class/scout/head;
        }
    }
}