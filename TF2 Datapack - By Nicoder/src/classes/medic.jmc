new trim_pattern(medic) {
	"asset_id": "tf2:medic",
	"description": {
		"translate": "trim_pattern.tf2.medic"
	},
	"template_item": "minecraft:stick"
}
generate_body_model(medic);

JMC.python(`
make_weapon(
    Class.MEDIC, slot=0, name='Syringe Gun',
	display_name='Syringe Gun (WIP)',
    attributes={
		'damage': {'base': 10, 'maxRamp': 1.2}, 
		'attackDelay': 0.105, 
		'reloadDelay': [1.305, 1.305],
		'clip': 40, 'ammo': 160, 
		'interpolate_rmb': 1,
		'isProjectile': true
	},
	projectile={
		'model': 'syringe',
		'spawn': [0.0, -0.45, 0.06], 
		'speed': 990, 'hitbox': 2,
		'deviation': {'min': 0, 'max': 200}, 
		'forces': {'gravity': 0.08},
		'block_collision': {'mode': Collision.STICK},
		'entity_collision': {'mode': Collision.IMPACT},
		'rotation': {'mode': Rotation.CHASE},
		'unreflectable': true,
		'can_destroy_stickybombs': true
	},
	controls={'reload': 3},
	team_specific=True
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.MEDIC, slot=1, name='Medi Gun',
	display_name="Medi Gun (WIP)",
	team_specific=True,
	attributes={
		'clip': 1, 'damage': 0,
		'heal': {'base': 24, 'maxRamp': 3.0},
		'uber': {'build': 40.0, 'last': 8.0}
	},
	controls={'alt_fire': True, 'reload': 0},
	extra=meter(seconds=40.0, score='tf2.ubercharge', scale=1/4) 
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.MEDIC, slot=2, 
    name='Bonesaw',
    attributes={'damage': {'base': 65}, 'attackDelay': 0.8, 'range': 3.2, 'isMelee': true}
)
`, jmc=true);

new predicate(ubercharge) {
	"condition": "minecraft:any_of",
	"terms": [
		{
			"condition": "minecraft:entity_properties",
			"entity": "this",
			"predicate": {
				"nbt": "{Tags:[\"tf2.uber_source\"]}"
			}
		},
		{
			"condition": "minecraft:entity_properties",
			"entity": "this",
			"predicate": {
				"nbt": "{Tags:[\"tf2.uber_patient\"]}"
			}
		}
	]
}

class Class.Medic {

	@lazy	
	function uber_model(x, y) {
		JMC.python(`
		condition = 'entity @s[tag=tf2.uber_$y]'
		if '$x' == 'remove': 
			condition = condition.replace('=', '=!')

		emit(f'''
		execute if {condition} run return fail
		tag @s $x tf2.uber_$y
		item replace entity @s armor.head with air
		item replace entity @s armor.chest with air
		item replace entity @s armor.legs with air
		''')
		`, jmc=false);
	}

	function give() {
		tf2.class:@s = Class.MEDIC;
		tf2.max_health:@s = tf2.health:@s = 150;
		attribute @s minecraft:movement_speed base set EVAL(BASE_SPEED * 1.07);

		clear @s;
		loot replace entity @s hotbar.0 loot tf2:class/medic/syringe_gun;
		loot replace entity @s hotbar.1 loot tf2:class/medic/medi_gun;
		loot replace entity @s hotbar.2 loot tf2:class/medic/bonesaw;
		loot replace entity @s armor.legs loot tf2:class/medic/leg_model;
		loot replace entity @s armor.chest loot tf2:class/medic/chest_model;

		lookup::inventory = @s::Inventory;
		tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
		tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
		tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.clip;
		tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.ammo;

		if (entity @s[tag=tf2.dead]) {
			this.drop_uber_on_death();
		}
		
	}
	@lazy
	function tick() {
		Weapons.get_ammo();
		HUD.actionbar();
		Weapons.set_ammo();

		this.inventory_lock();

		$regen_modulo := xrroou1m8_p_join:$__global__ % 20;
		if ($regen_modulo == 0) {
			this.natural_regen();
		}

		if (tf2.current_slot:@s != 1) {
			scoreboard players reset @s tf2.heal_target;
		}

		this.consume_uber();

		tag @s add self;
		if (tf2.current_slot:@s == 1 && !tf2.attack_delay:@s) {
			execute as @e[type=#tf2:player_like, tag=!self]
			        if score @s tf2.player.id = @p[tag=self] tf2.heal_target
			        at @s run this.apply_healing();
		}
		tag @s remove self;

		this.display_uber();
	}
	function inventory_lock() {
		item replace entity @s weapon.offhand with air;
		
		loot replace entity @s hotbar.0 loot tf2:class/medic/syringe_gun;
		$_count_ = clear @s *[custom_data~{key: EVAL(Class.MEDIC * 10 + 0)}] 0;
		if ($_count_ != 1) expand {
			clear @s *[custom_data~{key: EVAL(Class.MEDIC * 10 + 0)}];
			loot replace entity @s hotbar.0 loot tf2:class/medic/syringe_gun;
		}

		loot replace entity @s hotbar.1 loot tf2:class/medic/medi_gun;
		$_count_ = clear @s *[custom_data~{key: EVAL(Class.MEDIC * 10 + 1)}] 0;
		if ($_count_ != 1) expand {
			clear @s *[custom_data~{key: EVAL(Class.MEDIC * 10 + 1)}];
			loot replace entity @s hotbar.1 loot tf2:class/medic/medi_gun;
		}

		loot replace entity @s hotbar.2 loot tf2:class/medic/bonesaw;
		$_count_ = clear @s *[custom_data~{key: EVAL(Class.MEDIC * 10 + 2)}] 0;
		if ($_count_ != 1) expand {
			clear @s *[custom_data~{key: EVAL(Class.MEDIC * 10 + 2)}];
			loot replace entity @s hotbar.2 loot tf2:class/medic/bonesaw;
		}

		$_count_ = clear @s iron_leggings 0;
		if ($_count_ != 1) expand {
			clear @s iron_leggings;
			loot replace entity @s armor.legs loot tf2:class/medic/leg_model;
		}

		$_count_ = clear @s iron_chestplate 0;
		if ($_count_ != 1) expand {
			clear @s iron_chestplate;
			loot replace entity @s armor.chest loot tf2:class/medic/chest_model;
		}

		$_count_ = clear @s white_dye[item_model="tf2:misc/head"] 0;
		if ($_count_ != 1) expand {
			clear @s white_dye[item_model="tf2:misc/head"];
			loot replace entity @s armor.head loot tf2:class/medic/head;
		}		
	}
	function natural_regen() {
		$natural_regen_amount = 3;
		if (tf2.ticks_since_hurt:@s >= 60) {
			$natural_regen_amount++;
		}
		if (tf2.ticks_since_hurt:@s >= 120) {
			$natural_regen_amount++;
		}
		if (tf2.ticks_since_hurt:@s >= 180) {
			$natural_regen_amount++;
		}

		tag @s add self;
		execute as @e[type=#tf2:player_like]
				if score @s tf2.player.id = @p[tag=self] tf2.heal_target
				if score @s tf2.health < @s tf2.max_health
				run $natural_regen_amount *= 2;
		tag @s remove self;

		tf2.health:@s += $natural_regen_amount;
		Player.clamp_health();
	}
	function select_heal_target() {
		tf2.team:$current = tf2.team:@s;
		tf2.batch_number:$current = tf2.batch_number:@s;

		tag @s add self;
		execute as @a[tag=!self,distance=.. MEDIGUN_CONNECT_RANGE]
		        if score @s tf2.batch_number = $current tf2.batch_number
		        if score @s tf2.team = $current tf2.team
		        run tag @s add tf2.valid_heal_target;
		execute as @a[tag=!self,distance=.. MEDIGUN_CONNECT_RANGE]
		        if score @s tf2.class matches Class.SPY
		        if score @s tf2.disguise.team = $current tf2.team
		        run tag @s add tf2.valid_heal_target;
		tag @s remove self;

		raycast::direction.del();
		Raycast.informational();

		scoreboard players reset @s tf2.heal_target;
		tf2.heal_target:@s = tf2.player.id:@e[type=#tf2:player_like, tag=tf2.valid_heal_target, tag=iris.targeted_entity];
		tf2.heal_target:@s ??= tf2.player.id:@e[type=#tf2:player_like, tag=tf2.valid_heal_target, sort=nearest, limit=1];
		
		tag @e remove tf2.valid_heal_target;
	}
	function disconnect() {
		this.uber_model(remove, patient);
		scoreboard players reset @p[tag=self] tf2.heal_target;
	}
	function apply_healing() {
		if (entity @p[tag=self, distance= MEDIGUN_DISCONNECT_RANGE ..]) {
			return run this.disconnect();
		}
		$base_heal = @p[tag=self]::Inventory[{Slot: 1b}].components.minecraft:custom_data.attributes.heal.base;
		$maxRamp = @p[tag=self]::Inventory[{Slot: 1b}].components.minecraft:custom_data.attributes.heal.maxRamp * 50;
		$heal_amount := tf2.ticks_since_hurt:@s - 150;
		$heal_amount > 50;
		$heal_amount < $maxRamp;
		$heal_amount *= $base_heal;
		$heal_amount /= 50;

		$fraction_numerator := $heal_amount % 20;
		$heal_amount /= 20;

		$t := ((xrroou1m8_p_join:$__global__ % 20) * $fraction_numerator) % 20;
		if ($t < $fraction_numerator) {
			$heal_amount++;
		}
		tf2.health:@s += $heal_amount;
		if (tf2.health:@s > tf2.max_health:@s) {
			tag @s add tf2.overheal;
		}
		Player.clamp_health();

		$slow_threshold := (tf2.max_health:@s * 1425) / 1000;
		$uber_gain = 4;
		$id = tf2.player.id:@s;
		$medic_count = execute as @e[type=#tf2:player_like] if score @s tf2.heal_target = $id tf2.var;
		if (tf2.health:@s >= $slow_threshold) expand {
			$uber_gain /= 2;
			if ($medic_count >= 2) {
				$uber_gain /= 2;
			}
		}
		tf2.batch_number:$current = tf2.batch_number:@s;
		execute as @e[type=marker,tag=tf2.in_use,tag=tf2.setup_time]
				if score $current tf2.batch_number = @s tf2.batch_number
				run $uber_gain *= 3;

		tf2.ubercharge:@p[tag=self] += $uber_gain;

		if (entity @p[tag=self, tag=tf2.uber_source]) {
			this.uber_model(add, patient);
		}

		execute at @p[tag=self] 
				anchored eyes
				facing entity @s eyes
				run this.particleFX();
	}
	function particleFX() {
		if (tf2.team:@p[tag=self] == 1) {
			particle minecraft:block{block_state:red_stained_glass} ~ ~-0.6 ~ 0 0 0 0 1 normal; 
		}
		if (tf2.team:@p[tag=self] == 2) {
			particle minecraft:block{block_state:blue_stained_glass} ~ ~-0.6 ~ 0 0 0 0 1 normal; 
		}

		execute positioned ^ ^ ^0.1
				unless entity @s[distance=..2]
				run this.particleFX();
	}


	function activate_uber() {
		$full_bar = @s::Inventory[{Slot: 1b}].components.minecraft:custom_data.attributes.uber.build * EVAL(4 * 20);
		if (tf2.ubercharge:@s >= $full_bar) {
			this.uber_model(add, source);
		}
	}
	@lazy
	function display_uber() {
		execute positioned ~-3 ~-1 ~-3 
                unless entity @e[type=item_display,tag=tf2.control_point,dx=5,dy=1,dz=5]
                run Text.title(@s, "");
        Text.title(@s[tag=!tf2.can_cap], "");
		
		$full_bar = @s::Inventory[{Slot: 1b}].components.minecraft:custom_data.attributes.uber.build * EVAL(4 * 20);
		tf2.ubercharge:@s < $full_bar;
		$percent_ubercharge := (tf2.ubercharge:@s * 100) / $full_bar;
		Text.subtitle(@s, "&<$percent_ubercharge>% Ãœbercharge");
		title @s times 0 4 2;
	}
	function consume_uber() {
		$duration = @s::Inventory[{Slot: 1b}].components.minecraft:custom_data.attributes.uber.last * 100;
		$drain_rate := {@s::Inventory[{Slot: 1b}].components.minecraft:custom_data.attributes.uber.build * EVAL(4 * 100)} / $duration;

		tf2.ubercharge:@s[tag=tf2.uber_source] -= $drain_rate;
		tf2.ubercharge:@s[tag=tf2.uber_source] > 0;
		if (tf2.ubercharge:@s > 0) {
			return 1;
		}
		this.uber_model(remove, source);
	}
	function drop_uber_on_death() {
		scoreboard players reset @s tf2.heal_target;
		tf2.ubercharge:@s = 0;
		this.uber_model(remove, source);
	}
}