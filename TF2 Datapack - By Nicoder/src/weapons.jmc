new predicate(holding_melee) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "predicates": {
                    "minecraft:custom_data": "{attributes: {isMelee: 1b}}"
                }
            }
        }
    }
}
new predicate(holding_projectile) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "predicates": {
                    "minecraft:custom_data": "{attributes: {isProjectile: 1b}}"
                }
            }
        }
    }
}
new predicate(non_damaging) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "predicates": {
                            "minecraft:custom_data": {
                                "attributes": {"damage": {"base": 0}}
                            }
                        }
                    }
                }
            }
        },
        {
	    	"condition": "minecraft:inverted",
			"term": {
				"condition": "minecraft:entity_properties",
				"entity": "this",
				"predicate": {
					"equipment": {
						"mainhand": {
							"predicates": {
								"minecraft:custom_data": {
                                    "attributes": {"damage": {}}
                                }
							}   
						}
					}
				}
			}
		},
        {
            "condition": "minecraft:reference",
            "name": "tf2:empty_hand"
        }
    ]
}
new predicate(empty_hand) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {"count": 0}
        }
    }
}
new predicate(active_offhand) {
	"condition": "minecraft:entity_properties",
	"entity": "this",
	"predicate": {
		"equipment": {
			"offhand": {
                "count": {"min": 1}
            }
		}
	}
}
new predicate(hide_ammo) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:non_damaging"
        }
    ]
}
new predicate(uniform_damage) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "predicates": {
                            "minecraft:custom_data": {
                                "attributes": {"damage": {"uniform": true}}
                            }
                        }
                    }
                }
            }
        }
    ]
}
new predicate(has_main_fire) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "predicates": {
                    "minecraft:custom_data": {
                        "controls": {"main_fire": true}
                    }
                }
            }
        }
    }
}
new predicate(ammo_in_clip) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.current_slot": 0}
                },
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.primary_clip": {"min": 1}}
                }
            ]
        },
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.current_slot": 1}
                },
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.secondary_clip": {"min": 1}}
                }
            ]
        }
    ]
}
new item_modifier(load_crossbow) [
	{
		"function": "minecraft:set_components",
		"components": {
			"minecraft:charged_projectiles": [{"id": "minecraft:arrow"}]
		}
	},
	{
		"function": "minecraft:set_custom_data",
		"tag": "{should_detect_click: true}"
	}
];

new tags.function(retina.on_hit) {
    "values": [
        "tf2:weapons/on_hit"
    ],
    "replace": false
}

new tags.damage_type(minecraft.no_impact) {
    "values": [
        "tf2:screenshake",
        "minecraft:arrow"
    ],
    "replace": false
}
new tags.damage_type(minecraft.no_knockback) {
    "values": [
        "tf2:screenshake",
        "minecraft:arrow"
    ],
    "replace": false
}
new tags.damage_type(minecraft.bypasses_cooldown) {
    "values": [
        "minecraft:arrow"
    ],
    "replace": false
}
new damage_type(screenshake) {
    "exhaustion": 0.0,
    "message_id": "generic",
    "scaling": "never"
}

new trim_material(red) {
    "asset_name": "red",
    "description": {
        "color": "#DD3004",
        "translate": "trim_material.tf2.red"
    },
    "ingredient": "minecraft:red_banner",
    "item_model_index": 0.01
}
new trim_material(blu) {
    "asset_name": "blu",
    "description": {
        "color": "#258474",
        "translate": "trim_material.tf2.blu"
    },
    "ingredient": "minecraft:blue_banner",
    "item_model_index": 0.02
}
new trim_material(red_uber) {
    "asset_name": "red_uber",
    "description": {
        "color": "#DD3004",
        "translate": "trim_material.tf2.red_uber"
    },
    "ingredient": "minecraft:red_banner",
    "item_model_index": 0.01
}
new trim_material(blu_uber) {
    "asset_name": "blu_uber",
    "description": {
        "color": "#258474",
        "translate": "trim_material.tf2.blu_uber"
    },
    "ingredient": "minecraft:blue_banner",
    "item_model_index": 0.02
}
new tags.item(minecraft.trim_materials) {
    "values": [
        "minecraft:red_banner",
        "minecraft:blue_banner",
        "minecraft:red_concrete",
        "minecraft:blue_concrete"
    ]
}

import "raycast";
class Weapons {
    function main_fire() {
        if (tf2.attack_delay:@s > 0) return 0;
        if (tf2.class:@s == 6 && tf2.current_slot:@s == 0 && tf2.time_revved:@s < tf2.rev_threshold:@s) return 0;

        switch (tf2.class:@s) {
            case Class.SPY: Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            case Class.SOLDIER: Class.Soldier.inventory_lock();
            case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            case Class.PYRO: Class.Pyro.inventory_lock();
            case Class.ENGINEER: Class.Engineer.inventory_lock();
            case Class.MEDIC: Class.Medic.inventory_lock();
        }

        if (items entity @s weapon.mainhand *[custom_data~{attributes:{heal:{}}}]) {
            return run Class.Medic.select_heal_target();
        }
        if (!predicate tf2:has_main_fire) return 0;
        this.get_ammo();
        if ($_clip_ <= 0 && !predicate tf2:holding_melee) return 0;
        if (entity @s[tag=tf2.disguised]) {
            Class.Spy.title_image();
        }
        tag @s remove tf2.disguised;

        if (!predicate tf2:holding_melee) {
            playsound tf2:item.gun.shoot player @s ~ ~ ~ 1.35 1 0.1;
        }

        tf2.team:$current = tf2.team:@s;
        lookup::item = @s::SelectedItem;
        multicast::{} += lookup::item.components.minecraft:custom_data.retina;
        retina:input::TargetBlocks = true;
        retina:input::TargetEntities = true;
        
        if (data storage tf2:lookup item.components.minecraft:custom_data.attributes.spreadRecovery) expand {
            $_sr_ = lookup::item.components.minecraft:custom_data.attributes.spreadRecovery;
            if (tf2.time_idle:@s > $_sr_) {
                multicast::SpreadFactor = [0, 0];
            }
        }
        $_damage_  = lookup::item.components.minecraft:custom_data.attributes.damage.base;
        $_range_   = lookup::item.components.minecraft:custom_data.attributes.range * 1000;
        $_maxRamp_ = lookup::item.components.minecraft:custom_data.attributes.damage.maxRamp * 100;
        if (!data storage tf2:lookup item.components.minecraft:custom_data.attributes.range) $_range_ = 2147483647;
        if (!data storage tf2:lookup item.components.minecraft:custom_data.attributes.damage.maxRamp) $_maxRamp_ = 150;
        $_rangeDependent_ = execute unless predicate tf2:uniform_damage;
        // retina._variable_:$end_particle = true;

        if (predicate tf2:holding_projectile) {
            Projectile.spawn();
        }
        if (!predicate tf2:holding_projectile) {
            this.hitscan();
        }
        // retina._variable_:$end_particle = false;
        $_delay_ = lookup::item.components.minecraft:custom_data.attributes.attackDelay * 20000;
        tf2.attack_delay:@s += $_delay_;

        // Melee sound effects
        if (predicate tf2:holding_melee) return run {
            execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (!data storage retina:output {Target: "ENTITY"}) {
                return run playsound tf2:item.melee.miss player @s ~ ~ ~ 0.35 0.35 0.1;
            }
            playsound tf2:item.melee.hit player @s ~ ~ ~ 1.5 0.9 0.1;
        }

        $_clip_ --;
        this.set_ammo();
        tf2.consecutive_reload:@s = false;

        if (!$the_interpolation && data entity @s[scores={tf2.time_idle=..10}] SelectedItem.components.minecraft:custom_data.attributes.interpolate_rmb) {
            tf2.interpolate_rmb:@s = lookup::item.components.minecraft:custom_data.attributes.interpolate_rmb;
        }

        tf2.time_idle:@s = 0;
    }
    function alt_fire() {
        swap_hands();

        $_weaponID_ = @s::SelectedItem.components."minecraft:custom_data".key;

        switch ($_weaponID_) {
            case EVAL(Class.SNIPER * 10 + 0):
            this.main_fire();

            case EVAL(Class.PYRO * 10 + 0): 
            Class.Pyro.airblast();

            case EVAL(Class.MEDIC * 10 + 1):
            Class.Medic.activate_uber();

            case EVAL(Class.DEMOMAN * 10 + 1):
            Class.Demoman.detonate_all_stickybombs();
                
            default:
            return fail;
        }

        // switch (tf2.class:@s) {
        //     case Class.SPY: Class.Spy.inventory_lock();
        //     case Class.SNIPER: Class.Sniper.inventory_lock();
        //     case Class.SCOUT: Class.Scout.inventory_lock();
        //     case Class.SOLDIER: Class.Soldier.inventory_lock();
        //     // case Class.DEMOMAN: Class.Demoman.inventory_lock();
        //     case Class.HEAVY: Class.Heavy.inventory_lock();
        //     case Class.PYRO: Class.Pyro.inventory_lock();
        //     // case Class.ENGINEER: Class.Engineer.inventory_lock();
        //     // case Class.MEDIC: Class.Medic.inventory_lock();
        // }

    }
    function interpolate_rmb() {
        $the_interpolation = true;
        this.main_fire();
        tf2.interpolate_rmb:@s--;
        $the_interpolation = false;
    }
    function hitscan() {
        if (!items entity @s weapon.mainhand *[custom_data~{key: EVAL(Class.HEAVY * 10 + 0)}]) {
            return run this.multicast();
        }
        multicast:: += {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0};
        this.multicast();
        this.multicast();
        this.multicast();
        this.multicast();
    }

    function multicast() {
        $horizontal_count = multicast::HorizontalCount * 10;
        $vertical_count = multicast::VerticalCount * 10;
        $centered_count = multicast::CenteredCount * 1;

        // input validation
        if ($horizontal_count <= 0) return run {
            Text.tellraw(@a, "&<dark_red>[Error] &<red>HorizontalCount storage has invalid value of &<$horizontal_count>");
        }
        if ($vertical_count <= 0) return run {
            Text.tellraw(@a, "&<dark_red>[Error] &<red>VerticalCount storage has invalid value of &<$vertical_count>");
        } 
        if ($centered_count < 0) return run {
            Text.tellraw(@a, "&<dark_red>[Error] &<red>CenteredCount storage has invalid value of &<$centered_count>");
        }

        $spread_least = multicast::SpreadFactor[0];
        $spread_most = multicast::SpreadFactor[1];

        retina.__variable__:$single_call = false;
        tag @e remove retina.target;
        scoreboard players reset * retina.hit;
        kill @e[type=marker,tag=retina.endpoint];
        $input_pitch = @s::Rotation[1] * 10;
        $input_yaw = @s::Rotation[0] * 10;
        Math.gimbal_to_matrix();
        for ($i = 0; $i < $horizontal_count; $i += 10) { 
            for ($j = 0; $j < $vertical_count; $j += 10) {
                Math.Sway_Heave_Surge.find();
                Math.Sway_Heave_Surge.apply();
                retina.__variable__:$output_vec3.X = $output_vector_x;
                retina.__variable__:$output_vec3.Y = $output_vector_y;
                retina.__variable__:$output_vec3.Z = $output_vector_z;
                Raycast.damaging();
            } 
        }

        for ($k = 0; $k < $centered_count; $k++) {Raycast.damaging();}
        retina.__variable__:$single_call = true;
    }

    function get_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            $_clip_    = tf2.primary_clip:@s;
            $_maxClip_ = tf2.primary_maxClip:@s;
            $_ammo_    = tf2.primary_ammo:@s;
        }
        if (tf2.current_slot:@s == 1) {
            $_clip_    = tf2.secondary_clip:@s;
            $_maxClip_ = tf2.secondary_maxClip:@s;
            $_ammo_    = tf2.secondary_ammo:@s;
	}	}
    function set_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            tf2.primary_clip:@s      = $_clip_;
            tf2.primary_maxClip:@s   = $_maxClip_;
            tf2.primary_ammo:@s      = $_ammo_;
        }
        if (tf2.current_slot:@s == 1) {
            tf2.secondary_clip:@s    = $_clip_;
            tf2.secondary_maxClip:@s = $_maxClip_;
            tf2.secondary_ammo:@s    = $_ammo_;
	}	}
    function reload() {
        execute as @s[scores={tf2.class=Class.SPY}, tag=tf2.in_disguise_menu]
                run return run Class.Spy.disguise_menu.toggle_team(); 
        
        switch (tf2.class:@s) {
            case Class.SPY: Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            case Class.SOLDIER: Class.Soldier.inventory_lock();
            case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            case Class.PYRO: Class.Pyro.inventory_lock();
            case Class.ENGINEER: Class.Engineer.inventory_lock();
            case Class.MEDIC: Class.Medic.inventory_lock();
        }
        if (predicate tf2:hide_ammo) return 0;
        if (tf2.reload_delay:@s > 0) return 0;
        this.get_ammo();
        if ($_clip_ >= $_maxClip_) return 0;
        if ($_ammo_ == 0) return 0;

        lookup::item = @s::SelectedItem;
        $_reloadType_ = lookup::item.components.minecraft:custom_data.controls.reload;
        switch ($_reloadType_) {
            case Reload.NONE:
                break;
            case Reload.SINGLE:
                $_clip_ ++;
                $_ammo_ --;
            case Reload.LOSSY:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ = $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
            case Reload.LOSSLESS:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ -= $_clip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ += $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
        }
        this.set_ammo();

        if (tf2.consecutive_reload:@s == 0) $_reloadDelay_ = lookup::item.components.minecraft:custom_data.attributes.reloadDelay[0] * 20000;
        if (tf2.consecutive_reload:@s == 1) $_reloadDelay_ = lookup::item.components.minecraft:custom_data.attributes.reloadDelay[1] * 20000;
        tf2.reload_delay:@s += $_reloadDelay_;
        tf2.consecutive_reload:@s = true;

        if (tf2.attack_delay:@s <= 0) {
            // Prevents it from seeing "unloaded crossbow" the next tick and assuming the fire button was hit
            item modify entity @s weapon.mainhand tf2:load_crossbow;
        }
        return 1;
    }
    function attempt_autoreload() {
        // if (items entity @s[scores={tf2.is_invisible=0}] weapon.mainhand white_dye[custom_data~{cloak: 'cloak'}]) {
        //     return fail;
        // }
        if (!Weapons.reload()) return fail;
        item replace entity @s enderchest.0 from entity @s weapon.mainhand;
        item replace entity @s weapon.mainhand with air;
        item replace entity @s weapon.mainhand from entity @s enderchest.0;
        return 1;
    }
    function on_hit() {
        if (!$callback) {return fail;}

        vars::distance = retina:output::Distance;
        execute unless predicate tf2:hide_ammo at @s run Weapons.draw_line();

        $backstab ?= execute if items entity @s weapon.mainhand minecraft:snowball[minecraft:custom_data~{attributes:{canBackstab: true}}];
        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}, tag=!tf2.dead, gamemode=!spectator] run this.apply_damage();
    }
    function draw_line() {
        // Get weapon position
        execute anchored eyes positioned ^-0.3 ^-0.2 ^ positioned ~ ~ ~ summon minecraft:marker run {
            summon::line.X = @s::Pos[0];
            summon::line.Y = @s::Pos[1];
            summon::line.Z = @s::Pos[2];
            kill @s;
        }

        // Get vector from start to end
        summon::line.endX = retina:output::ContactCoordinates[0];
        summon::line.endY = retina:output::ContactCoordinates[1];
        summon::line.endZ = retina:output::ContactCoordinates[2];

        $length = 0;
        Hardcode.repeatList("[AXIS]", () => {
            $component = summon::line.end[AXIS] * 1000;
            $start = summon::line.[AXIS] * 1000;
            $component -= $start;
            $component *= $component;
            $length += $component;
        }, ["X", "Y", "Z"]);
        $length = Math.sqrt($length);
        summon::line.scale = 0.002 * (float) $length;

        execute run {
            $ summon item_display $(X) $(Y) $(Z) {
                item: {id: "white_dye", components: {"minecraft:item_model": "tf2:bullet"}},
                Tags: ["tf2.visual", "tf2.newest"],
                transformation: {
                left_rotation: [0f, 0f, 0f, 1f],
                right_rotation: [0f, 0f, 0f, 1f],
                translation: [0f, 0f, 0f],
                scale: [1f, 1f, $(scale)f]
                }
            };
            $ execute as @e[type=item_display,tag=tf2.visual,tag=tf2.newest]
                      at @s 
                      run rotate @s 
                      facing $(endX) $(endY) $(endZ);

            tf2.lifetime:@e[type=item_display,tag=tf2.visual,tag=tf2.newest] = 4;
            tag @e[type=item_display,tag=tf2.visual,tag=tf2.newest] remove tf2.newest;

        } with summon::line;
        // summon::line.del();
    }
    function apply_damage() {
        // @within this.damage()
        if (score @s tf2.team = $current tf2.team) return 0;
        vars::kill_verb.del();
        $_distance_ = vars::distance * 1000;
        $_hitHead_ = retina:output::HitEntityHead;
        if ($_distance_ > $_range_) return 0;
        $_finalDamage_ = $_damage_;
        
        this.calculate_falloff();
        $_finalDamage_ *= $_multiplier_;
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;

        vars::kill_verb = "killed";

        if ($backstab) expand {
            vars::kill_verb = "backstabbed";
            $_finalDamage_ = tf2.max_health:@s;
            $_finalDamage_ *= 6;
        }
        // TODO: implement critical hits and resistances
        
        if ($_hitHead_ && entity @a[tag=retina.executing, scores={tf2.class=Class.SNIPER, tf2.time_scoped=4..}]) {
            vars::kill_verb = "headshot";
        } 

        $cause = tf2.player.id:@a[tag=retina.executing, limit=1];
        $target = tf2.player.id:@s;
        
        if (Damage.try_merge_into_last()) {
            return true;
        }

        lookup::damages << {};
        lookup::damages[-1].cause  = $cause;
        lookup::damages[-1].target = $target;
        lookup::damages[-1].amount = $_finalDamage_;
        lookup::damages[-1].kill_verb = vars::kill_verb;
        lookup::damages[-1].weapon = @a[tag=retina.executing, limit=1]::SelectedItem.components.minecraft:custom_name;
        return true;
    }

    function calculate_falloff() {
        if ($_rangeDependent_) {
            $_hammerUnits_ = vars::distance * EVAL (1 / 0.01905);
            $_hammerUnits_ < 1024;

            $_temp1_ = $_hammerUnits_;
            $_temp1_ *= $_hammerUnits_;
            $_temp1_ *= 3;

            $_temp2_ = $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= 2;
            if ($_temp2_ == -2147483648) $_temp2_ --;
            $_temp2_ /= 1024;

            $_multiplier_ = $_temp1_;
            $_multiplier_ -= $_temp2_;
            $_multiplier_ *= -100;
            $_multiplier_ /= 1048576;
            $_multiplier_ += 50;

            $_temp3_ = 100;
            if ($_hammerUnits_ < 512) {
                $_temp3_ = $_maxRamp_;
                $_temp3_ -= 100;
                $_temp3_ *= 2;
            }
            $_multiplier_ *= $_temp3_;
            $_multiplier_ /= 100;
            $_multiplier_ += 100;
        }
        else if (entity @a[tag=retina.executing, scores={tf2.class=Class.SNIPER, tf2.time_scoped=4..}]) {
            Class.Sniper.damage_scale();
        }
        else {$_multiplier_ = 100;}
    }
    function slot_check() {
        tf2.current_slot:@s ??= 0;
        tf2.last_slot:@s = tf2.current_slot:@s;
        tf2.current_slot:@s = @s::SelectedItemSlot;

        if (tf2.last_slot:@s != tf2.current_slot:@s) {
            tf2.attack_delay:@s = @s::SelectedItem.components.minecraft:custom_data.attributes.deployTime * 10000;
            if (!data entity @s SelectedItem.components.minecraft:custom_data.attributes.deployTime) tf2.attack_delay:@s = 10000;
            tf2.consecutive_reload:@s = false;
            tf2.time_idle:@s = 0;
        }
    }
    function crit_sound() {
        // @needs_macro
        $ playsound tf2:crit.hit$(num) player @s ~ ~ ~ 0.85 1 0.05;
    }
    function crit_receive_sound() {
        // @needs_macro
        $ playsound tf2:crit.received$(num) player @s ~ ~ ~ 0.85 1 0.05;
    }
}

import 'projectile.jmc';