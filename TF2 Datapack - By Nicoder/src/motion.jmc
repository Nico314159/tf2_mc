class Motion {
    // Moves an entity using a score-driven AABB motion system
    // Run this function as and at the entity to be moved
    
    // The following values are scaled up 1000 times.
    // Entity position encoded by tf2.[x,y,z]
    // Entity motion encoded by tf2.mot_[x,y,z]
    // Entity hitbox size encoded by tf2.hitbox, represents hitbox radius, so half the total.
    // Base friction assigned with tf2.friction.
    // Collision friction assigned with tf2.collision_friction.

    // Mark entity to halt on collision with tf2.halt.

    // Returns collision flags on the entity encoded by tf2.collision and tf2.collision_[x,y,z]
    function move() {
        // Prepare data
        motion::pos = {};
        $mot.distance = 1000;

        // printf("Pos: &<tf2.x:@s>, &<tf2.y:@s>, &<tf2.z:@s> - Mot: &<tf2.mot_x:@s>, &<tf2.mot_y:@s>, &<tf2.mot_z:@s> - Hitbox: &<tf2.hitbox:@s>");

        Hardcode.repeatList(
            "[AXIS]", () => {
            // Prepare data
            tf2.collision_[AXIS]:@s = 0;
            tf2.hitbox_[AXIS]:@s = tf2.hitbox:@s;

            // Compute signs of motion vector so the math works in one direction
            $mot.motion_[AXIS] = tf2.mot_[AXIS]:@s;
            if (tf2.mot_[AXIS]:@s >= 0) $mot.sign_[AXIS] = 1;
            if (tf2.mot_[AXIS]:@s < 0) $mot.sign_[AXIS] = -1;
            tf2.mot_[AXIS]:@s *= $mot.sign_[AXIS];

            // Compute min and max points
            $mot.min_[AXIS] = tf2.[AXIS]:@s;
            $mot.max_[AXIS] = tf2.[AXIS]:@s;
            $mot.min_[AXIS] -= tf2.hitbox_[AXIS]:@s;
            $mot.max_[AXIS] += tf2.hitbox_[AXIS]:@s;
            $mot.base_[AXIS] = $mot.min_[AXIS];
            $mot.base_[AXIS] /= 1000;
            $mot.base_[AXIS] *= 1000;

            // Push min position to storage to begin traversal at min position
            motion::pos.[AXIS] = 0.001 * (int) $mot.base_[AXIS];

            // Compute head and tail points
            $mot.hitbox_[AXIS] = tf2.hitbox_[AXIS]:@s;
            $mot.hitbox_[AXIS] *= $mot.sign_[AXIS];
            $mot.head_[AXIS] = tf2.[AXIS]:@s;
            $mot.tail_[AXIS] = tf2.[AXIS]:@s;
            $mot.head_[AXIS] += $mot.hitbox_[AXIS];
            $mot.tail_[AXIS] -= $mot.hitbox_[AXIS];

            // Compute size of hitbox
            $mot.hitbox_[AXIS] = $mot.head_[AXIS];
            $mot.hitbox_[AXIS] /= 1000;
            $mot.temp = $mot.tail_[AXIS];
            $mot.temp /= 1000;
            $mot.hitbox_[AXIS] -= $mot.temp;
            if ($mot.hitbox_[AXIS] < 0) $mot.hitbox_[AXIS] *= -1;

            // Compute deltas for voxel traversal
            $mot.delta_[AXIS] = 1000000;
            $mot.delta_[AXIS] /= tf2.mot_[AXIS]:@s;
            if (tf2.mot_[AXIS]:@s = 0) $mot.delta_[AXIS] = _MAX_INT_;

            // Compute distances along ray to voxel borders
            $mot.distance_head_[AXIS] = $mot.head_[AXIS];
            $mot.distance_tail_[AXIS] = $mot.tail_[AXIS];
            $mot.distance_head_[AXIS] %= 1000;
            $mot.distance_tail_[AXIS] %= 1000;
            if ($mot.sign_[AXIS] = 1) {
                $mot.distance_head_[AXIS] *= -1;
                $mot.distance_tail_[AXIS] *= -1;
                $mot.distance_head_[AXIS] += 1000;
                $mot.distance_tail_[AXIS] += 1000;
            }
            $mot.distance_head_[AXIS] *= $mot.delta_[AXIS];
            $mot.distance_tail_[AXIS] *= $mot.delta_[AXIS];
            $mot.distance_head_[AXIS] /= 1000;
            $mot.distance_tail_[AXIS] /= 1000;
            if (tf2.mot_[AXIS]:@s = 0) {
                $mot.distance_head_[AXIS] = _MAX_INT_;
                $mot.distance_tail_[AXIS] = _MAX_INT_;
            }
            
            }, ["x", "y", "z"]
        );

        // printf("Hitbox: &<tf2.hitbox_x:@s>, &<tf2.hitbox_y:@s>, &<tf2.hitbox_z:@s>");

        // Begin voxel traversal
        this.initial_position() with motion::pos;
        // execute at @s run summon minecraft:item_display ~ ~ ~ {Tags:["point"],item:{id:"minecraft:stone",count:1},transformation:{right_rotation:[0.0f,0.0f,0.0f,1.0f],scale:[0.1f,0.1f,0.1f],left_rotation:[0.0f,0.0f,0.0f,1.0f],translation:[0.0f,0.0f,0.0f]}};
        // kill @s;
    }

    function initial_position() {
        $ execute positioned $(x) $(y) $(z) run this.initial_hitbox_check();
    }

    // Checks the initial state of the hitbox to find any geometry within the same space
    function initial_hitbox_check() {
        Hardcode.repeatList(
            "[AXIS]", () => {
                $mot.voxel_[AXIS] = $mot.base_[AXIS];
                $mot.collision_distance_[AXIS] = _MAX_INT_;
                $mot.collision_surface_[AXIS] = 0;
            }, ["x", "y", "z"]
        );

        this.initial_hitbox_check_x();
        this.traverse();

        JMC.pythonFile("initial_hitbox_check_script.py", jmc=true);
    }

    // Determines which step needs to be taken
    function traverse() {
        // Find shortest distance
        $mot.shortest_distance = _MAX_INT_;
        Hardcode.repeatList(
            "[AXIS]", () => {
                Hardcode.repeatList(
                    "[SIDE]", () => {
                        $mot.shortest_distance < $mot.distance_[SIDE]_[AXIS];
                    }, ["head", "tail"]
                );
                $mot.shortest_distance < $mot.collision_distance_[AXIS];
            }, ["x", "y", "z"]
        );
        // printf("Distances: head: &<$mot.distance_head_x>, &<$mot.distance_head_y>, &<$mot.distance_head_z> - tail: &<$mot.distance_tail_x>, &<$mot.distance_tail_y>, &<$mot.distance_tail_z> - col: &<$mot.collision_distance_x>, &<$mot.collision_distance_y>, &<$mot.collision_distance_z> - short: &<$mot.shortest_distance>");

        // Stop traversal if the shortest distance is too far away
        if ($mot.shortest_distance > $mot.distance) return run this.stop_motion();

        // Process data based on nearest axis
        Hardcode.repeatList(
            "[AXIS]", () => {
                if ($mot.shortest_distance = $mot.collision_distance_[AXIS]) return run this.collision_[AXIS]();
                Hardcode.repeatList(
                    "[SIDE]", () => {
                        if ($mot.shortest_distance = $mot.distance_[SIDE]_[AXIS]) return run this.[SIDE]_[AXIS]();
                    }, ["head", "tail"]
                );
            }, ["x", "y", "z"]
        );

        // Generate progression functions
        JMC.pythonFile("traversal_progression.py", jmc=true);

        // Generate collision functions
        Hardcode.repeatList(
            "[AXIS]", () => {

            function collision_[AXIS]() {
                Hardcode.repeatList(
                    "[SECOND_AXIS]", () => {
                        // Update position
                        $mot.step_[SECOND_AXIS] = $mot.motion_[SECOND_AXIS];
                        $mot.step_[SECOND_AXIS] *= $mot.shortest_distance;
                        $mot.step_[SECOND_AXIS] /= $mot.distance;
                        tf2.[SECOND_AXIS]:@s += $mot.step_[SECOND_AXIS];
                        $mot.motion_[SECOND_AXIS] -= $mot.step_[SECOND_AXIS];

                        // Update distances
                        $mot.distance_head_[SECOND_AXIS] -= $mot.shortest_distance;
                        $mot.distance_tail_[SECOND_AXIS] -= $mot.shortest_distance;
                    }, ["x", "y", "z"]
                );
                tf2.[AXIS]:@s = $mot.collision_surface_[AXIS];
                if ($mot.sign_[AXIS] = 1) {
                    tf2.[AXIS]:@s -= tf2.hitbox_[AXIS]:@s;
                } else {
                    tf2.[AXIS]:@s += tf2.hitbox_[AXIS]:@s;
                }
                tf2.[AXIS]:@s -= $mot.sign_[AXIS];
                Hardcode.repeatList(
                    "[SECOND_AXIS]", () => {
                        // Recompute min and max positions
                        $mot.min_[SECOND_AXIS] = tf2.[SECOND_AXIS]:@s;
                        $mot.max_[SECOND_AXIS] = tf2.[SECOND_AXIS]:@s;
                        $mot.min_[SECOND_AXIS] -= tf2.hitbox_[SECOND_AXIS]:@s;
                        $mot.max_[SECOND_AXIS] += tf2.hitbox_[SECOND_AXIS]:@s;
                    }, ["x", "y", "z"]
                );

                // Update total distance
                $mot.distance -= $mot.shortest_distance;

                // Set collision axis
                tf2.collision_[AXIS]:@s = $mot.sign_[AXIS];

                // Cap distance to prevent motion along that axis
                $mot.distance_head_[AXIS] = _MAX_INT_;
                $mot.distance_tail_[AXIS] = _MAX_INT_;
                $mot.motion_[AXIS] = 0;
                // printf("Collision on [AXIS]");

                // End if the conditions fit
                if (tf2.halt:@s = 1 || $mot.distance = 0) {
                    this.stop_motion();
                } else {
                    // Refresh the collision distances
                    this.initial_hitbox_check();
                }
            }}, ["x", "y", "z"]
        );
    }

    // Scans through the newly-acquired blocks in the hitbox and updates the collision distances
    function update_collision_distance() {
        // printf("Hitbox: x: &<$mot.hitbox_x>, y: &<$mot.hitbox_y>, z: &<$mot.hitbox_z>");
        // printf("base: x: &<$mot.base_x>, y: &<$mot.base_y>, z: &<$mot.base_z>");

        Hardcode.repeatList(
            "[AXIS]", () => {
                $mot.voxel_[AXIS] = $mot.base_[AXIS];
            }, ["x", "y", "z"]
        );

        Hardcode.repeatLists(
            ["[STEP]", "[FIRST_AXIS]", "[SECOND_AXIS]"],
            () => {
                if ($mot.step = [STEP] && $mot.sign_[FIRST_AXIS] = -1) this.hitbox_[FIRST_AXIS]_[SECOND_AXIS]();
                if ($mot.step = [STEP] && $mot.sign_[FIRST_AXIS] =  1) this.hitbox_[FIRST_AXIS]_[FIRST_AXIS]();
            },
            [
                ["0", "1", "2"],
                ["x", "y", "z"],
                ["y", "z", "x"]
            ]
        );

        // Continue traversing
        this.traverse();

        // Generate hitbox functions
        JMC.pythonFile("hitbox_script.py", jmc=true);
    }

    // Updates the collision distance variables based on the nearest geometry in the execution context's block
    function get_distance_to_geometry() {
        // Skip if the block has no hitbox
        if (block ~ ~ ~ #tf2:motion_passable) return 1;

        // Get the geometry data of the block
        iris:data::Shape = [];
        function iris:get_hitbox/block;

        // printf("min: &<$mot.min_x>, &<$mot.min_y>, &<$mot.min_z> - max: &<$mot.max_x>, &<$mot.max_y>, &<$mot.max_z> - motion: &<$mot.motion_x>, &<$mot.motion_y>, &<$mot.motion_z> - dist: &<$mot.distance>");

        // Iterate through the geometry and find the nearest
        while (data storage iris:data Shape[]) {
            // Get bounding box parameters
            Hardcode.repeatLists(
                ["[AXIS]", "[INDEX]"],
                () => {
                    $mot.geo_min_[AXIS] = iris:data::Shape[-1].min[[INDEX]] * 1000;
                    $mot.geo_max_[AXIS] = iris:data::Shape[-1].max[[INDEX]] * 1000;
                    $mot.geo_min_[AXIS] += $mot.voxel_[AXIS];
                    $mot.geo_max_[AXIS] += $mot.voxel_[AXIS];
                },
                [
                    ["x", "y", "z"],
                    ["0", "1", "2"]
                ]
            );

            // printf("geo: min: &<$mot.geo_min_x>, &<$mot.geo_min_y>, &<$mot.geo_min_z> - max: &<$mot.geo_max_x>, &<$mot.geo_max_y>, &<$mot.geo_max_z>");

            Hardcode.repeatLists(
                ["[AXIS]", "[SECOND_AXIS]", "[THIRD_AXIS]"],
                () => {
                    // Compute distance along ray to geometry under a certain axis
                    if ($mot.sign_[AXIS] = 1) {
                        $mot.distance_[AXIS] = $mot.geo_min_[AXIS];
                        $mot.distance_[AXIS] -= $mot.max_[AXIS];
                    } else {
                        $mot.distance_[AXIS] = $mot.geo_max_[AXIS];
                        $mot.distance_[AXIS] -= $mot.min_[AXIS];
                    }
                    
                    $mot.distance_[AXIS] *= $mot.distance;
                    $mot.distance_[AXIS] /= $mot.motion_[AXIS];

                    // Check if collision is valid
                    if ($mot.motion_[AXIS] != 0 && $mot.distance_[AXIS] >= 0 && $mot.distance_[AXIS] <= $mot.distance) {
                        $mot.temp_distance_[SECOND_AXIS] = $mot.motion_[SECOND_AXIS];
                        $mot.temp_distance_[SECOND_AXIS] *= $mot.distance_[AXIS];
                        $mot.temp_distance_[SECOND_AXIS] /= 1000;
                        $mot.temp_min_[SECOND_AXIS] = $mot.min_[SECOND_AXIS];
                        $mot.temp_max_[SECOND_AXIS] = $mot.max_[SECOND_AXIS];
                        $mot.temp_min_[SECOND_AXIS] += $mot.temp_distance_[SECOND_AXIS];
                        $mot.temp_max_[SECOND_AXIS] += $mot.temp_distance_[SECOND_AXIS];

                        $mot.temp_distance_[THIRD_AXIS] = $mot.motion_[THIRD_AXIS];
                        $mot.temp_distance_[THIRD_AXIS] *= $mot.distance_[AXIS];
                        $mot.temp_distance_[THIRD_AXIS] /= 1000;
                        $mot.temp_min_[THIRD_AXIS] = $mot.min_[THIRD_AXIS];
                        $mot.temp_max_[THIRD_AXIS] = $mot.max_[THIRD_AXIS];
                        $mot.temp_min_[THIRD_AXIS] += $mot.temp_distance_[THIRD_AXIS];
                        $mot.temp_max_[THIRD_AXIS] += $mot.temp_distance_[THIRD_AXIS];

                        // printf("cast: min: [SECOND_AXIS]: &<$mot.temp_min_[SECOND_AXIS]>, [THIRD_AXIS]: &<$mot.temp_min_[THIRD_AXIS]> - max: [SECOND_AXIS]: &<$mot.temp_max_[SECOND_AXIS]>, [THIRD_AXIS]: &<$mot.temp_max_[THIRD_AXIS]>");

                        if (
                            $mot.temp_max_[SECOND_AXIS] >= $mot.geo_min_[SECOND_AXIS] &&
                            $mot.temp_min_[SECOND_AXIS] <= $mot.geo_max_[SECOND_AXIS] &&
                            $mot.temp_max_[THIRD_AXIS] >= $mot.geo_min_[THIRD_AXIS] &&
                            $mot.temp_min_[THIRD_AXIS] <= $mot.geo_max_[THIRD_AXIS]
                        ) {
                            $mot.collision_distance_[AXIS] < $mot.distance_[AXIS];
                            if ($mot.sign_[AXIS] = 1) {
                                $mot.collision_surface_[AXIS] = $mot.geo_min_[AXIS];
                            } else {
                                $mot.collision_surface_[AXIS] = $mot.geo_max_[AXIS];
                            }
                        }
                    }
                },
                [
                    ["x", "y", "z"],
                    ["y", "z", "x"],
                    ["z", "x", "y"]
                ]
            );

            // printf("dist: &<$mot.distance_x>, &<$mot.distance_y>, &<$mot.distance_z>");

            iris:data::Shape[-1].del();
        }
    }

    // Logic for when the traversal comes to an end
    function stop_motion() {
        tf2.collision:@s = 0;
        Hardcode.repeatList(
            "[AXIS]",
            () => {
                // Set collision flag
                if (tf2.collision_[AXIS]:@s != 0) tf2.collision:@s = 1;
            },
            ["x", "y", "z"]
        );

        Hardcode.repeatList(
            "[AXIS]",
            () => {
                // Update position
                if (tf2.halt:@s = 0 || tf2.collision:@s = 0) tf2.[AXIS]:@s += $mot.motion_[AXIS];
                motion::pos.[AXIS] = 0.001 * (double) tf2.[AXIS]:@s;

                // Restore motion signs to normal
                tf2.mot_[AXIS]:@s *= $mot.sign_[AXIS];
            },
            ["x", "y", "z"]
        );

        // Move entity
        this.final_position() with motion::pos;
    }

    function final_position() {
        $ teleport @s $(x) $(y) $(z);
    }
}

new tag.block(motion_passable) {
    "values": [
        "#minecraft:banners",
        "#minecraft:bee_growables",
        "#minecraft:buttons",
        "#minecraft:corals",
        "#minecraft:fire",
        "#minecraft:small_flowers",
        "#minecraft:flowers",
        "#minecraft:pressure_plates",
        "#minecraft:rails",
        "#minecraft:signs",
        "#minecraft:wall_corals",
        "#minecraft:candles",
        "#minecraft:saplings",
        "#minecraft:wool_carpets",

        "minecraft:air",
        "minecraft:attached_melon_stem",
        "minecraft:attached_pumpkin_stem",
        "minecraft:bamboo_sapling",
        "minecraft:big_dripleaf",
        "minecraft:brown_mushroom",
        "minecraft:bubble_column",
        "minecraft:cave_air",
        "minecraft:cave_vines",
        "minecraft:cave_vines_plant",
        "minecraft:cobweb",
        "minecraft:crimson_fungus",
        "minecraft:crimson_roots",
        "minecraft:dead_brain_coral",
        "minecraft:dead_brain_coral_fan",
        "minecraft:dead_brain_coral_wall_fan",
        "minecraft:dead_bubble_coral",
        "minecraft:dead_bubble_coral_fan",
        "minecraft:dead_bubble_coral_wall_fan",
        "minecraft:dead_bush",
        "minecraft:dead_fire_coral",
        "minecraft:dead_fire_coral_fan",
        "minecraft:dead_fire_coral_wall_fan",
        "minecraft:dead_horn_coral",
        "minecraft:dead_horn_coral_fan",
        "minecraft:dead_horn_coral_wall_fan",
        "minecraft:dead_tube_coral",
        "minecraft:dead_tube_coral_fan",
        "minecraft:dead_tube_coral_wall_fan",
        "minecraft:fern",
        "minecraft:frogspawn",
        "minecraft:glow_lichen",
        "minecraft:hanging_roots",
        "minecraft:kelp",
        "minecraft:kelp_plant",
        "minecraft:large_fern",
        "minecraft:ladder",
        "minecraft:lava",
        "minecraft:lever",
        "minecraft:light",
        "minecraft:lily_pad",
        "minecraft:moss_carpet",
        "minecraft:moving_piston",
        "minecraft:nether_portal",
        "minecraft:nether_sprouts",
        "minecraft:nether_wart",
        "minecraft:powder_snow",
        "minecraft:red_mushroom",
        "minecraft:redstone_torch",
        "minecraft:redstone_wall_torch",
        "minecraft:redstone_wire",
        "minecraft:scaffolding",
        "minecraft:sculk_vein",
        "minecraft:seagrass",
        "minecraft:short_grass",
        "minecraft:small_dripleaf",
        "minecraft:snow",
        "minecraft:soul_torch",
        "minecraft:soul_wall_torch",
        "minecraft:spore_blossom",
        "minecraft:structure_void",
        "minecraft:sugar_cane",
        "minecraft:tall_grass",
        "minecraft:tall_seagrass",
        "minecraft:torch",
        "minecraft:tripwire",
        "minecraft:tripwire_hook",
        "minecraft:twisting_vines",
        "minecraft:twisting_vines_plant",
        "minecraft:vine",
        "minecraft:void_air",
        "minecraft:wall_torch",
        "minecraft:warped_fungus",
        "minecraft:warped_roots",
        "minecraft:water",
        "minecraft:weeping_vines",
        "minecraft:weeping_vines_plant"
    ]
}