class Raycast {
    function damaging() {
        tag @e remove iris.executing;
        iris:settings::Callback = "tf2:weapons/on_hit";
        if (!data storage tf2:raycast direction) return run {
            function iris:get_target;
        }
        this.contact() with raycast::direction;
        tag @e remove iris.possible_target;
    }
    function informational() {
        tag @e remove iris.executing;
        iris:settings::Callback.del();
        iris:settings:: += {MaxRecursionDepth: 127, TargetEntities: true};
        if (!data storage tf2:raycast direction) return run {
            execute at @s anchored eyes positioned ^ ^ ^ run function iris:get_target;
        }
        this.contact() with raycast::direction;
        tag @e remove iris.possible_target;
    }
    function contact() {
        $ execute facing ~$(X) ~$(Y) ~$(Z) run function iris:get_target;
    }
    function to_self() {
        @s::NoAI = 1b;
        rotate @s facing entity @e[tag=tf2.self,limit=1] feet;
        $input_pitch = @s::Rotation[1] * 10;
        $input_yaw = @s::Rotation[0] * 10;
        Math.gimbal_to_vector();
        raycast::direction.X = 0.001 * (float) $output_vector_x;
        raycast::direction.Y = 0.001 * (float) $output_vector_y;
        raycast::direction.Z = 0.001 * (float) $output_vector_z;
        kill @s;
    }
}

function iris.raycast.test_for_entity() {
    //> iris:raycast/test_for_entity
    //
    // @within iris:raycast/loop
    // @output
    //   Result: 0
    //   Success: 1 if an entity was hit, 0 otherwise

    if (!data storage iris:settings {TargetEntities: true}) {return fail;}
    execute align xyz expand {
        if(!entity @e[type=!#iris:ignore, tag=!iris.ignore, dx=0, dy=0, dz=0, tag=!iris.executing]) {return fail;}
        execute as @e[type=!#iris:ignore, tag=!iris.ignore, dx=0, dy=0, dz=0, tag=!iris.executing] 
                run iris.get_hitbox.entity();
        execute as @e[type=item_display, tag=!iris.ignore, dx=0, dy=0, dz=0, tag=tf2.projectile, tag=!iris.executing] 
                run iris.get_hitbox.item_display();
    }
    return run iris.raycast.check_intersection.loop();
}

function iris.get_hitbox.item_display() { 
    iris:$entity_height := tf2.hitbox:@s * 1000;
    iris:$entity_width := tf2.hitbox:@s * 1000;
    iris:$entity_found = true;
    iris.get_hitbox.entity();
}