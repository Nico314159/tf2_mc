function setup_markers() {
    // Summons new gamestate markers if there aren't enough, and kills extras if there are too many.

    if ($batch_markers < $Settings.max_batches) {
        summon minecraft:marker 0 0 0 {Tags:["tf2.batch"], data:{lastPos: [0.0d, 0.0d, 0.0d], map: {}}};
    }
    if ($batch_markers > $Settings.max_batches) {kill @e[type=marker,tag=tf2.batch,sort=random,limit=1];}

    $batch_markers = execute if entity @e[type=marker,tag=tf2.batch];
    scoreboard players reset $index tf2.batch_number;
    execute as @e[type=marker,tag=tf2.batch] unless score @s tf2.batch_number = @s tf2.batch_number run {
        tf2.map:@s = DEFAULT_MAP;
        tf2.batch_number:@s > tf2.batch_number:@e[type=marker,tag=tf2.batch];
        tf2.batch_number:@s ++;
        index::i = tf2.batch_number:@s;
        Session.sync() with index::;
    }
    if ($batch_markers != $Settings.max_batches) setup_markers();
}

function join_queue() {
    // Adds players to queues when they select them using /trigger.
    // @within __tick()__

    clear @s written_book;
    tag @s add tf2.in_queue;
    tp @s[scores={tf2.queue_type=1}] Lobby.Competitive;
    tp @s[scores={tf2.queue_type=2}] Lobby.Casual;
    tp @s[scores={tf2.queue_type=3}] Lobby.Chaos;
    tf2.batch_number:@s ??= 0;
}

function team_assign() {
    // Assigns players to RED/BLU team evenly (without using randomization).
    // @within start_game.as_marker.main()

    tf2.team:@s = $team_temp;
    tf2.team:@s ++;
    team join RED @s[scores={tf2.team=1}];
    team join BLU @s[scores={tf2.team=2}];
    $team_temp ?= execute if score $team_temp tf2.var matches 0;
    Spawn.init();
}

function remove_gameplay_effects() {
    tag @s remove tf2.on_fire;
    tf2.can_double_jump:@s = false;
    effect clear @s invisibility;
    attribute @s minecraft:jump_strength modifier remove tf2:no_jump;
    attribute @s minecraft:movement_speed modifier remove tf2:no_move;
}

function class_select() {
    clear @s[scores={tf2.class=1..9}];
    remove_gameplay_effects();

    if (data storage tf2:vars class_name) {
        give.internal() with vars::;
    }

    replenish_ammo_and_health();

    playsound tf2:pickup.ammo player @s[scores={tf2.health=1..,tf2.class=1..9}];
}

function give.internal() {
    // @needs_macro
    JMC.put("$function tf2:class/$(class_name)/give");
    data remove storage tf2:vars class_name;
}

function replenish_ammo_and_health() {
    // kinda hacky
    tf2.health:@s = 1000;
    Player.clamp_health();

    tf2.primary_clip:@s = tf2.primary_maxClip:@s;
    tf2.primary_ammo:@s = tf2.primary_maxAmmo:@s;
    tf2.secondary_clip:@s = tf2.secondary_maxClip:@s;
    tf2.secondary_ammo:@s = tf2.secondary_maxAmmo:@s;

    // class-specific stuff
    if (tf2.class:@s == Class.SPY) {
        tf2.cloak:@s = @s::equipment.offhand.components.minecraft:custom_data.attributes.cloak_recharge * 20;
    }
    if (tf2.class:@s[tag=tf2.dead] == Class.MEDIC) {
        // drop Ãœber on death
        Class.Medic.drop_uber_on_death();
    }
    // if (tf2.class:@s == Class.ENGINEER) {
    //     tf2.metal:@s = 200;
    // }
}

function swap_hands() {
    item replace entity @s enderchest.0 from entity @s weapon.mainhand;
    item replace entity @s weapon.mainhand from entity @s weapon.offhand;
    item replace entity @s weapon.offhand from entity @s enderchest.0;
}

function change_team() {
    tf2.team:@s %= 2;
    tf2.team:@s ++;
    team join RED @s[scores={tf2.team=1}];
    team join BLU @s[scores={tf2.team=2}];

    // Update model number
    tf2.model_number:@s /= 10;
    tf2.model_number:@s *= 10;
    tf2.model_number:@s += tf2.team:@s;
}

function insert_into_batch() {
    // @needs_macro
    // @context chat

    $ scoreboard players set @s tf2.batch_number $(batch);
    $ scoreboard players set @s tf2.team $(team);
    team join RED @s[scores={tf2.team=1}];
    team join BLU @s[scores={tf2.team=2}];
    tf2.max_health:@s = 100;
    Spawn.init();
    tag @s add tf2.is_playing;

    Timer.resync_visibility();
}