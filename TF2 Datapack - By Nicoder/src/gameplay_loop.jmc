// Item.create(
//     itemId      = changeClass,
//     itemType    = carrot_on_a_stick,
//     displayName = "Change Class",
//     nbt         = {CustomModelData: 10}
// );
// Item.create(
//     itemId      = selectSniper,
//     itemType    = carrot_on_a_stick,
//     displayName = "Sniper",
//     nbt         = {CustomModelData: Class.SNIPER}
// );
// Item.create(
//     itemId      = selectScout,
//     itemType    = carrot_on_a_stick,
//     displayName = "Scout",
//     nbt         = {CustomModelData: Class.SCOUT}
// );
// Item.create(
//     itemId      = selectHeavy,
//     itemType    = carrot_on_a_stick,
//     displayName = "Heavy",
//     nbt         = {CustomModelData: Class.HEAVY}
// );
// Item.create(
//     itemId      = selectSoldier,
//     itemType    = carrot_on_a_stick,
//     displayName = "Soldier",
//     nbt         = {CustomModelData: Class.SOLDIER}
// );

@lazy function summon_entities() {
    // Objectives
    summon::objectives = @s::data.map.objectives;
    tf2.index:$temp = tf2:summon::objectives;
    tf2.index:$temp *= 10;
    while (data storage tf2:summon objectives[]) {
        tf2.index:$temp -= 10;
        execute summon item_display run {
            // Storage format of `summon::objectives[-1]`
            //      Pos: double[3]
            //          Coordinates of where the objective is located on the map.
            //      Tags: string[]
            //          Specifies info about what type of objective it is. (eg: control point, intelligence, payload cart)
            //      data.team: byte
            //          Which team starts out as the owner of the point (0 = unowned, 1 = RED, 2 = BLU).
            //      data.locked: bool
            //          # DEPRECATED, use the `tf2.locked` tag instead. #
            //          Whether or not the objective should start out locked.
            //      data.capture_threshold: float
            //          Amount of time needed to capture the objective, in *seconds* (converted to *milli-ticks* when in score form).");

            summon::entity.Pos = summon::objectives[-1].Pos;
            summon::entity.Tags = summon::objectives[-1].Tags;
            summon::entity.item = {
                id: "white_dye", 
                components: {"minecraft:item_model": "tf2:map_element/control_point"}
            };
            summon::entity.transformation.translation = [0.0f, 0.5f, 0.0f];
            @s::{} += summon::entity; 
            tag @s add tf2.objective;
            tf2.team:@s              = summon::objectives[-1].data.team * 1;
            tf2.capture_threshold:@s = summon::objectives[-1].data.capture_threshold * 20000;
            tf2.increment:@s         = summon::objectives[-1].data.increment * 20;
            tf2.gamemode:@s          = tf2.gamemode:$temp;
            tf2.index:@s             = tf2.index:$temp;
            tf2.index:$highest > tf2.index:@s;
            tf2.batch_number:@s = tf2.batch_number:$local;
            tf2.red_progress:@s[scores={tf2.team=1}] = tf2.capture_threshold:@s;
            tf2.blu_progress:@s[scores={tf2.team=2}] = tf2.capture_threshold:@s;
            execute if score @s tf2.index = $highest tf2.index
                    unless score @s tf2.gamemode 
                    matches Gamemode.KOTH 
                    run tag @s add tf2.last;
            tag @s[scores={tf2.index=0,tf2.gamemode=Gamemode.CONTROL_PTS}] add tf2.last;
        } with index::;
        summon::objectives[-1].del();
    }
    summon::entity.del();

    // Spawn doors
    summon::doors = @s::data.map.spawn_doors.red;
    summon::doors << @s::data.map.spawn_doors.blu[];
    $blu_length = @s::data.map.spawn_doors.blu;
    $i = 0;
    while (data storage tf2:summon doors[]) {
        execute summon marker run {
            // Storage format of `summon::doors[-1]`
            //      Pos: double[3]
            //          Coordinates of where the door is located on the map.
            //      Rotation: float[2]
            //          How the door entity is rotated (affects teleport command)
            //      data.dx/y/z: int
            //          How large the detection box is in each dimension

            summon::entity.Pos = summon::doors[-1].Pos;
            summon::entity.Rotation = summon::doors[-1].Rotation;
            summon::entity.data = summon::doors[-1].data;

            $direct_tp = summon::entity.data.direct_tp;
            if (!$direct_tp) expand {
                tag @s add tf2.visible;
                summon::entity.data.direct_tp = "~ ~ ~";
            }

            $opp_team ?= execute if score $i tf2.var >= $blu_length tf2.var;
            $opp_team ++;
            summon::entity.data.opp_team = $opp_team;
            @s::{} += summon::entity;
            tf2.batch_number:@s = tf2.batch_number:$local;
            tag @s add tf2.spawn_door;
        } with index::;
        summon::doors[-1].del();
        $i++;
    }
    summon::entity.del();

    // Animated doors
    summon::doors = @s::data.map.automatic_doors;
    tf2.door.id:$i = summon::doors;
    while (tf2.door.id:$i) {
        tf2.door.id:$i--;
        execute summon item_display run Door.initialize_path();
        summon::doors[-1].del();
    }
    summon::entity.del();

    // Pickups (health & ammo)
    summon::pickups = @s::data.map.pickups;
    while (data storage tf2:summon pickups[]) {
        summon area_effect_cloud ~ ~-1.5 ~ {
            Duration: -1,
            Age: -2147483648,
            WaitTime: -2147483648,
            Invulnerable: 1b,
            Tags: ["tf2.new"],
            Passengers: [{
                id: "minecraft:item",
                NoGravity: 1b,
                Invulnerable: 1b,
                Tags: ["tf2.pickup", "tf2.new"],
                Age: -32768s, PickupDelay: 32767s,
                Item: {id: "minecraft:paper", count: 1b, components: {"minecraft:custom_model_data": {floats: [0f]}}}
            }]
        };

        execute as @e[type=area_effect_cloud,tag=tf2.new] run {
            @s::Pos = summon::pickups[-1].Pos;
            tf2.batch_number:@s = tf2.batch_number:$local;
            tag @s remove tf2.new;
        }
        execute as @e[type=item,tag=tf2.new] run {
            execute run { 
                $tag @s add tf2.$(kind)_pack; 
                $ @s::Item.components.minecraft:item_model = "tf2:pickup/$(kind)";
            } with summon::pickups[-1];

            tf2.size:@s = summon::pickups[-1].size;

            tf2.batch_number:@s = tf2.batch_number:$local;
            tf2.respawn_timer:@s = 1;
            tag @s remove tf2.new;
        }
        summon::pickups[-1].del();
    }
    summon::entity.del();

    // Resupply cabinets
    summon::resupply = @s::data.map.resupply_cabinets.red;
    summon::resupply << @s::data.map.resupply_cabinets.blu[];
    $blu_length = @s::data.map.resupply_cabinets.blu;
    $i = 0;
    while (data storage tf2:summon resupply[]) {
        execute summon item_display run {
            // Storage format of `summon::resupply[-1]`
            //      Pos: double[3]
            //          Coordinates of where the resupply cabinet is located on the map.
            //      Rotation: float[2]
            //          Which way the resupply cabinet is facing.

            summon::entity.Pos = summon::resupply[-1].Pos;
            summon::entity.Rotation = summon::resupply[-1].Rotation;
            summon::entity.item = {id: "paper", components: {"minecraft:item_model": "tf2:resupply_cabinet"}};
            summon::entity.transformation.scale = [1.0f, 1.01f, 1.0f];
            summon::entity.transformation.translation = [0.0f, 1.0f, 0.0f];

            tf2.team:@s ?= execute if score $i tf2.var < $blu_length tf2.var;
            tf2.team:@s ++;
            @s::{} += summon::entity;
            tf2.batch_number:@s = tf2.batch_number:$local;
            tag @s add tf2.resupply;
        }
        summon::resupply[-1].del();
        $i++;
    }
    summon::entity.del();

    // Clear out invalid entities
    execute as @e[type=!#tf2:player_like,tag=!tf2.static_prop]
            unless score @s tf2.batch_number = @s tf2.batch_number
            run kill @s;

    // Copy over the new session IDs all at once
    execute as @e[type=!#tf2:player_like] 
            if score @s tf2.batch_number 
               = $local tf2.batch_number
            run Session.sync() with index::;
}

class start_game {
    class as_marker {
        function main() {
            // Starts a new running game with the players in the queue. ");
            // @within __tick__()

            if ($Settings.show_debug_messages) Text.tellraw(@a, "&<bold><Debug> &<!bold>Game has been started by &<@s> at &<0008it54g_p_join:$__global__> ticks gametime");
            if ($Settings.show_debug_messages >= 2 && $profiler_installed) timekeeper.var:$enabled = -1;
            tf2.batch_number:$local = tf2.batch_number:@s;
            index::i = tf2.batch_number:@s;
            index::map_id = tf2.map:@s;
            execute run {
                Session.increment_global() with index::;
                Session.sync() with index::;
                $ @s::data.map = maps::$(map_id);
                $ running_games::$(i) = maps::$(map_id);
            } with index::;

            tf2.gamemode:@s = @s::data.map.gamemode;
            tf2.gamemode:$temp = tf2.gamemode:@s;
            summon_entities();
            if (tf2.gamemode:@s matches Gamemode.ATK_DEF..Gamemode.DOMINATION) {
                Objectives.control_point.visuals.spacing();
            }

            // TODO: replace random assignment with "first come, first serve"
            if ($comp_queue_length >= 12) {
                execute as @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=1,tf2.batch_number=0},limit=12,sort=random] run start_game.as_players.generic();
            }
            else if ($casual_queue_length >= 24) {
                execute as @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=2,tf2.batch_number=0},limit=24,sort=random] run start_game.as_players.generic();
            }
            else if ($chaos_queue_length >= 40) {
                execute as @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=3,tf2.batch_number=0},limit=40,sort=random] run start_game.as_players.generic();
            }
            scoreboard players operation @s tf2.queue_type = @e[type=#tf2:player_like,tag=tf2.current,limit=1] tf2.queue_type;
            if (tf2.gamemode:@s matches Gamemode.ATK_DEF..Gamemode.CONTROL_PTS) {
                tf2.max_timer:@s = tf2.timer:@s = @s::data.map.timer * 20;
                if (data entity @s data.map.timer) Timer.set_max() with index::;
                if (data entity @s data.map.timer) Timer.show() with index::;
                if (data entity @s data.map.setup_time) Timer.begin_setup() with index::;
            }
            if (tf2.gamemode:@s == Gamemode.KOTH) {
                tf2.team:@s = 0;
                scoreboard players reset @s tf2.timer; // failsafe, shouldn't actually be necessary ever
                KOTH_Timer.set_max() with index::;
                KOTH_Timer.show() with index::;
            }
            start_game.as_marker.tell_info();

            scoreboard players reset @e[tag=tf2.current] tf2.team;
            $team_temp = 0;
            $count = execute if entity @e[tag=tf2.current];
            execute as @a[tag=tf2.current,sort=random] run team_assign();
            $count %= 2; // in case of an odd player count, the extra player has a 50/50 change of going to either team
            if ($count = 1 && predicate tf2:coin_flip) {tf2.team:@r[tag=tf2.current,scores={tf2.team=1}] = 2;}
            execute as @e[type=!player,tag=tf2.current,sort=random] run team_assign();
            tag @s add tf2.in_use;
            tag @e remove tf2.current;
        } function tell_info() {
            // [WIP] Tells players which gamemode they will be playing, and some basic info about how that gamemode works.
            // @within start_game.as_marker.main()

            if (tf2.gamemode:@s = Gamemode.ATK_DEF) {
                Text.tellraw(@a[tag=tf2.current], "&<bold, underlined>Gamemode:&<!underlined> &<italic, info_atk_def>Attack / Defend");
            }
            if (tf2.gamemode:@s = Gamemode.CONTROL_PTS) {
                Text.tellraw(@a[tag=tf2.current], "&<bold, underlined>Gamemode:&<!underlined> &<italic, info_control_points>Control Points");
            }
            if (tf2.gamemode:@s = Gamemode.KOTH) {
                Text.tellraw(@a[tag=tf2.current], "&<bold, underlined>Gamemode:&<!underlined> &<italic, info_koth>King of the Hill");
            }
        }
    }
    class as_players {
        function generic(){
            // Adds players to the game and gives them a tag so that other functions know.
            // @within start_game.as_marker.main()

            effect give @s glowing 10 0 true;
            // if ($Settings.show_debug_messages) say generic
            tf2.batch_number:@s = tf2.batch_number:$local;
            tag @s remove tf2.in_queue;
            tag @s add tf2.is_playing;

            // prevents players messing with trapdoors, containers, etc.
            attribute @s minecraft:block_interaction_range base set -1;

            // placeholder until all 9 classes are properly implemented
            tf2.max_health:@s ??= 100;
            tf2.health:@s = tf2.max_health:@s;

            // tag is used for team assignment
            tag @s add tf2.current;
            tf2.respawn_timer:@s = 0;
            tf2.reload_delay:@s = 0;

            // apply gametype-specific settings
            if (tf2.queue_type:@s = 1) start_game.as_players.competitive();
            if (tf2.queue_type:@s = 2) start_game.as_players.casual();
            if (tf2.queue_type:@s = 3) start_game.as_players.chaos();
        } function casual() {
            // if ($Settings.show_debug_messages) say casual
            tag @s add tf2.random_spread;
            tag @s remove tf2.random_crits;
            tag @s add tf2.free_vote;
            tag @s add tf2.can_be_autobalanced;
        } function competitive() {
            // if ($Settings.show_debug_messages) say competitive
            tag @s remove tf2.random_spread;
            tag @s remove tf2.random_crits;
            tag @s remove tf2.free_vote;
            tag @s add tf2.can_be_autobalanced;
        } function chaos() {
            // if ($Settings.show_debug_messages) say chaos
            tag @s add tf2.random_spread;
            tag @s add tf2.random_crits;
            tag @s add tf2.free_vote;
            tag @s remove tf2.can_be_autobalanced;
        }
    }
}

TextProp.hoverText(
    "stalemate_text",
    "You're &<bold>all losers!"
);
class reset {
    function announce_winner() {
        // Announces the winner of the game, but doesn't relog players yet.
        // @within:
        //   Objectives.control_point.gamestate()
        //   Timer.end_game()

        // if ($Settings.show_debug_messages) tellraw Nico314 ["",{"text":"<Debug> ","bold":true},{"score":{"name":"$red_cp_count","objective":"tf2.var"},"color":"red"},{"text":", ","color":"red"},{"score":{"name":"$blu_cp_count","objective":"tf2.var"},"color":"blue"},{"text":", ","color":"blue"},{"score":{"name":"@s","objective":"tf2.index"}}]
        // if ($Settings.show_debug_messages = 1) Text.tellraw(@a, "&<bold><Debug> &<!bold>Announced at &<0008it54g_p_join:$__global__> ticks gametime");
        execute as @e if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        execute as @e[type=item_display,tag=tf2.control_point,tag=tf2.current] at @s run Objectives.control_point.lock();
        kill @e[type=villager,tag=tf2.current];
        if ($winner == 1) Text.tellraw(@a[tag=tf2.current], "&<yellow>MATCH &<white>| &<red,bold,italic>RED wins!");
        if ($winner == 2) Text.tellraw(@a[tag=tf2.current], "&<yellow>MATCH &<white>| &<blue,bold,italic>BLU wins!");
        if ($winner == -1) Text.tellraw(@a[tag=tf2.current], "&<gray,italic,stalemate_text>Stalemate....");

        execute as @a[tag=tf2.current] run {
            if (tf2.team:@s == $winner) Text.tellraw(@s, "&<!bold,italic>Victory.");
            else if ($winner matches 1..2) Text.tellraw(@s, "&<!bold,italic>You've failed!");
        }
        tf2.timer:@s = -1;
        tag @a remove tf2.current;
    } function as_marker() {
        // Resets gameplay-specific information once a match ends.
        // @within Timer.main()

        if ($Settings.show_debug_messages = 1) Text.tellraw(@a, "&<bold><Debug> &<!bold>Game controlled by &<@s> has ended at &<0008it54g_p_join:$__global__> ticks gametime");
        index::i = tf2.batch_number:@s;
        Timer.hide() with index::;
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @e if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        execute as @e[type=item_display,tag=tf2.control_point,tag=tf2.current] at @s run reset.as_objectives();
        execute as @a[tag=tf2.current] run reset.as_players();
        kill @e[type=item_display,tag=tf2.current,tag=!tf2.permanent];
        execute as @e[type=item,tag=tf2.pickup,tag=tf2.current] run Pickup.delete_stack();
        kill @e[type=area_effect_cloud,tag=tf2.current];
        kill @e[type=falling_block,tag=tf2.current];
        kill @e[type=marker,tag=tf2.spawn_door,tag=tf2.current];
        kill @e[type=item_display,tag=tf2.current,tag=tf2.projectile];
        if (timekeeper.var:$enabled == -1 && $profiler_installed) timekeeper.var:$enabled = 1;
        kill @s;
        setup_markers();
    } function as_objectives() {
        // Resets all objective data when a match ends, and kills the Objectives.
        // @within reset.as_marker()

        Objectives.control_point.find_index.main();
        Hardcode.repeatList(
            "key",
            () => {lookup::points[0].key = '[""]';},
            ["owner", "progress", "symbol", "extra"]
        );
        Objectives.control_point.find_index.reinsert();
        kill @s;
    } function as_players() {
        // Adds to players' permanent statistics, then relogs them.
        // @within reset.as_marker()

        tf2.permanent.games_played:@s ++;
        if (tf2.team:@s == $winner) {
            tf2.permanent.games_won:@s ++;
        }
        
        tag @s remove tf2.current;
        0008it54g_p_join:@s --;
        kill @s[type=villager]; // debug only
    }
}

function test_items() {
    Hardcode.repeat("|i|", () => {
        item replace entity @s hotbar.|i| with air;
    }, start=0, stop=9);
    item replace entity @s weapon.offhand with air;

    give @s Select.SNIPER;
    give @s Select.SCOUT;
    give @s Select.HEAVY;
    give @s Select.SOLDIER;
    give @s Select.PYRO;
    give @s Select.SPY;
    give @s Select.MEDIC;
    give @s Select.DEMOMAN;
    // give @s Select.ENGINEER;

    attribute @s minecraft:movement_speed modifier add tf2:no_move -1 add_multiplied_total;
    attribute @s minecraft:jump_strength modifier add tf2:no_jump -1 add_multiplied_total;
    attribute @s minecraft:movement_speed modifier remove tf2:match_disguise_speed;
    scoreboard players reset @s tf2.class;
}

function quick_start() {
    Hardcode.repeat("never", () => {
        summon blaze ~ ~ ~ {NoAI: 1b, Silent: 1b};
    }, start=1, stop=12);
    tf2.queue_type:@e[type=blaze,limit=11,sort=nearest] = 1;
}